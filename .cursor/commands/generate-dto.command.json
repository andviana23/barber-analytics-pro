{
  "name": "generate-dto",
  "description": "Gera um DTO validado a partir de uma tabela do banco Supabase (analisa via @pgsql e cria DTO completo)",
  "prompt": "# üì¶ GERAR DTO A PARTIR DO BANCO\n\nVoc√™ deve conectar ao banco Supabase via **@pgsql** e gerar automaticamente um **DTO (Data Transfer Object)** completo baseado na estrutura real da tabela.\n\n## üìã Entrada Esperada\n\nO usu√°rio fornecer√°:\n1. **Nome da tabela** no Supabase (ex: `revenues`, `expenses`, `clients`)\n2. **Tipo de DTO** (create, update, response)\n\n---\n\n## üîç Passos de Execu√ß√£o\n\n### **1. Conectar ao Supabase via MCP**\n\nUse o conector **@pgsql** configurado no Cursor para inspecionar a tabela:\n\n```sql\n-- Buscar estrutura da tabela\nSELECT \n  column_name,\n  data_type,\n  is_nullable,\n  column_default,\n  character_maximum_length\nFROM information_schema.columns\nWHERE table_name = '{table_name}'\n  AND table_schema = 'public'\nORDER BY ordinal_position;\n\n-- Buscar constraints e valida√ß√µes\nSELECT \n  conname AS constraint_name,\n  contype AS constraint_type,\n  pg_get_constraintdef(oid) AS constraint_definition\nFROM pg_constraint\nWHERE conrelid = '{table_name}'::regclass;\n\n-- Buscar ENUMs utilizados\nSELECT \n  t.typname AS enum_name,\n  e.enumlabel AS enum_value\nFROM pg_type t \nJOIN pg_enum e ON t.oid = e.enumtypid\nWHERE t.typname IN (\n  SELECT DISTINCT udt_name \n  FROM information_schema.columns \n  WHERE table_name = '{table_name}'\n);\n```\n\n---\n\n### **2. Analisar Estrutura e Gerar DTO**\n\nCom base nos dados retornados, gerar:\n\n#### **A) WHITELIST (Colunas Permitidas)**\n\n```javascript\nexport const ALLOWED_{TABLE}_COLUMNS = [\n  // Campos obrigat√≥rios (is_nullable = 'NO')\n  'campo_obrigatorio_1',\n  'campo_obrigatorio_2',\n  \n  // Campos opcionais\n  'campo_opcional_1',\n  'campo_opcional_2',\n  \n  // Relacionamentos (FKs)\n  'unit_id',\n  'user_id'\n];\n```\n\n#### **B) BLACKLIST (Campos Proibidos)**\n\n```javascript\nexport const FORBIDDEN_{TABLE}_FIELDS = [\n  // Auto-gerados\n  'id',\n  'created_at',\n  'updated_at',\n  \n  // Calculados (GENERATED)\n  'campo_calculado',\n  \n  // Campos de joins\n  'unit_name',\n  'user_name'\n];\n```\n\n#### **C) DTO de Cria√ß√£o**\n\n```javascript\nexport class Create{EntityName}DTO {\n  constructor(data) {\n    // Mapear campos obrigat√≥rios\n    this.campo_obrigatorio_1 = data.campo_obrigatorio_1;\n    \n    // Mapear campos opcionais com defaults\n    this.campo_opcional_1 = data.campo_opcional_1 || null;\n    \n    // Mapear ENUMs\n    this.tipo = data.tipo; // enum: ['valor1', 'valor2']\n  }\n\n  validate() {\n    const errors = [];\n    \n    // Validar campos obrigat√≥rios\n    if (!this.campo_obrigatorio_1) {\n      errors.push('Campo \"campo_obrigatorio_1\" √© obrigat√≥rio');\n    }\n    \n    // Validar tipos\n    if (this.campo_numerico && typeof this.campo_numerico !== 'number') {\n      errors.push('Campo \"campo_numerico\" deve ser um n√∫mero');\n    }\n    \n    // Validar ENUMs\n    const validTipos = ['valor1', 'valor2'];\n    if (this.tipo && !validTipos.includes(this.tipo)) {\n      errors.push(`Campo \"tipo\" deve ser um dos valores: ${validTipos.join(', ')}`);\n    }\n    \n    // Validar constraints (CHECKs)\n    if (this.campo_numerico && this.campo_numerico <= 0) {\n      errors.push('Campo \"campo_numerico\" deve ser maior que zero');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  toDatabase() {\n    const dbObject = {};\n    \n    for (const [key, value] of Object.entries(this)) {\n      if (FORBIDDEN_{TABLE}_FIELDS.includes(key)) continue;\n      if (!ALLOWED_{TABLE}_COLUMNS.includes(key)) continue;\n      if (value !== null && value !== undefined) {\n        dbObject[key] = value;\n      }\n    }\n    \n    return dbObject;\n  }\n}\n```\n\n#### **D) DTO de Resposta**\n\n```javascript\nexport class {EntityName}ResponseDTO {\n  constructor(dbRecord) {\n    this.id = dbRecord.id;\n    this.campo_obrigatorio_1 = dbRecord.campo_obrigatorio_1;\n    this.campo_opcional_1 = dbRecord.campo_opcional_1;\n    this.created_at = dbRecord.created_at;\n  }\n\n  toPlainObject() {\n    return {\n      id: this.id,\n      campo_obrigatorio_1: this.campo_obrigatorio_1,\n      campo_opcional_1: this.campo_opcional_1,\n      created_at: this.created_at\n    };\n  }\n}\n```\n\n---\n\n## üõ°Ô∏è Valida√ß√µes Autom√°ticas a Implementar\n\n### **1. Baseadas em Tipo do PostgreSQL**\n\n| Tipo PostgreSQL | Valida√ß√£o JavaScript |\n|----------------|---------------------|\n| `VARCHAR(N)` | `if (value.length > N) errors.push(...)` |\n| `NUMERIC(P,S)` | `if (typeof value !== 'number') errors.push(...)` |\n| `DATE` | `if (!this._isValidDate(value)) errors.push(...)` |\n| `UUID` | `if (!this._isValidUUID(value)) errors.push(...)` |\n| `BOOLEAN` | `if (typeof value !== 'boolean') errors.push(...)` |\n| `ENUM` | `if (!validValues.includes(value)) errors.push(...)` |\n\n### **2. Baseadas em Constraints**\n\n| Constraint | Valida√ß√£o |\n|-----------|----------|\n| `NOT NULL` | Campo obrigat√≥rio no DTO |\n| `CHECK (value > 0)` | `if (value <= 0) errors.push(...)` |\n| `UNIQUE` | Aviso no coment√°rio do DTO |\n| `FOREIGN KEY` | Validar UUID se fornecido |\n\n### **3. Baseadas em Defaults**\n\n```javascript\n// Se column_default = 'CURRENT_DATE'\nthis.date = data.date || this._getCurrentDate();\n\n// Se column_default = '0'\nthis.fees = data.fees || 0;\n```\n\n---\n\n## üìù Exemplo de Sa√≠da Completa\n\n### Para a tabela `revenues`:\n\n```javascript\n/**\n * DTOs para Revenues\n * \n * Auto-gerado a partir da tabela: revenues\n * Data: 2025-10-18\n * \n * Estrutura do banco:\n * - id UUID (PK, auto-generated)\n * - type income_type ENUM (NOT NULL)\n * - value NUMERIC(12,2) (NOT NULL, CHECK > 0)\n * - date DATE (NOT NULL, default CURRENT_DATE)\n * - unit_id UUID (FK ‚Üí units)\n * - status transaction_status ENUM (default 'Pending')\n */\n\nexport const ALLOWED_REVENUE_COLUMNS = [\n  'type', 'value', 'date', 'source', 'observations',\n  'unit_id', 'professional_id', 'account_id', 'party_id',\n  'gross_amount', 'net_amount', 'fees', 'status',\n  'accrual_start_date', 'accrual_end_date',\n  'expected_receipt_date', 'actual_receipt_date'\n];\n\nexport const FORBIDDEN_REVENUE_FIELDS = [\n  'id', 'created_at', 'updated_at',\n  'profit', 'net_profit', 'profit_margin' // GENERATED\n];\n\nexport const VALID_INCOME_TYPES = ['service', 'product', 'commission', 'other'];\nexport const VALID_STATUSES = ['Pending', 'Received', 'Overdue', 'Cancelled'];\n\nexport class CreateRevenueDTO {\n  constructor(data) {\n    // Campos obrigat√≥rios\n    this.type = data.type; // ENUM income_type\n    this.value = this._convertToNumber(data.value); // NUMERIC(12,2)\n    this.date = data.date || this._getCurrentDate(); // DATE\n    \n    // Campos opcionais\n    this.source = data.source || null;\n    this.observations = data.observations || null;\n    this.unit_id = data.unit_id || null;\n    this.account_id = data.account_id || null;\n    \n    // Valores financeiros\n    this.gross_amount = data.gross_amount || data.value;\n    this.net_amount = data.net_amount || data.value;\n    this.fees = data.fees || 0;\n    \n    // Status\n    this.status = data.status || 'Pending';\n  }\n\n  validate() {\n    const errors = [];\n    \n    // Validar tipo\n    if (!this.type) errors.push('Campo \"type\" √© obrigat√≥rio');\n    if (this.type && !VALID_INCOME_TYPES.includes(this.type)) {\n      errors.push(`Tipo inv√°lido. Valores aceitos: ${VALID_INCOME_TYPES.join(', ')}`);\n    }\n    \n    // Validar valor (NUMERIC CHECK > 0)\n    if (!this.value) errors.push('Campo \"value\" √© obrigat√≥rio');\n    if (this.value && (typeof this.value !== 'number' || this.value <= 0)) {\n      errors.push('Campo \"value\" deve ser um n√∫mero maior que zero');\n    }\n    \n    // Validar data (DATE)\n    if (!this.date) errors.push('Campo \"date\" √© obrigat√≥rio');\n    if (this.date && !this._isValidDate(this.date)) {\n      errors.push('Campo \"date\" deve estar no formato YYYY-MM-DD');\n    }\n    \n    // Validar UUIDs\n    const uuidFields = ['unit_id', 'professional_id', 'account_id', 'party_id'];\n    for (const field of uuidFields) {\n      if (this[field] && !this._isValidUUID(this[field])) {\n        errors.push(`Campo \"${field}\" deve ser um UUID v√°lido`);\n      }\n    }\n    \n    return { isValid: errors.length === 0, errors };\n  }\n\n  toDatabase() {\n    const dbObject = {};\n    for (const [key, value] of Object.entries(this)) {\n      if (FORBIDDEN_REVENUE_FIELDS.includes(key)) continue;\n      if (!ALLOWED_REVENUE_COLUMNS.includes(key)) continue;\n      if (value !== null && value !== undefined) dbObject[key] = value;\n    }\n    return dbObject;\n  }\n\n  // Helper methods\n  _convertToNumber(value) {\n    if (value === null || value === undefined || value === '') return null;\n    const num = Number(value);\n    return isNaN(num) ? null : Math.floor(num * 100) / 100;\n  }\n\n  _getCurrentDate() {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  _isValidDate(dateString) {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!regex.test(dateString)) return false;\n    const date = new Date(dateString);\n    return !isNaN(date.getTime());\n  }\n\n  _isValidUUID(uuid) {\n    const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    return regex.test(uuid);\n  }\n}\n\nexport class RevenueResponseDTO {\n  constructor(dbRecord) {\n    this.id = dbRecord.id;\n    this.type = dbRecord.type;\n    this.value = parseFloat(dbRecord.value);\n    this.date = dbRecord.date;\n    this.source = dbRecord.source;\n    this.observations = dbRecord.observations;\n    this.unit_id = dbRecord.unit_id;\n    this.status = dbRecord.status;\n    this.created_at = dbRecord.created_at;\n  }\n\n  toPlainObject() {\n    return {\n      id: this.id,\n      type: this.type,\n      value: this.value,\n      date: this.date,\n      source: this.source,\n      observations: this.observations,\n      unit_id: this.unit_id,\n      status: this.status,\n      created_at: this.created_at\n    };\n  }\n}\n```\n\n---\n\n## ‚úÖ Checklist de Gera√ß√£o\n\n- [ ] Conectou ao banco via @pgsql\n- [ ] Listou todas as colunas da tabela\n- [ ] Identificou campos obrigat√≥rios (NOT NULL)\n- [ ] Identificou ENUMs e seus valores\n- [ ] Identificou CHECKs e constraints\n- [ ] Gerou WHITELIST completa\n- [ ] Gerou BLACKLIST (auto-generated + GENERATED)\n- [ ] Criou valida√ß√µes para todos os tipos\n- [ ] Implementou helpers (_isValidDate, _isValidUUID, etc.)\n- [ ] Adicionou coment√°rios JSDoc\n- [ ] Salvou arquivo em `src/dtos/{tableName}DTO.js`\n\n---\n\n## üîó Comandos SQL √öteis\n\n```sql\n-- Listar todas as tabelas\nSELECT table_name \nFROM information_schema.tables \nWHERE table_schema = 'public' \nORDER BY table_name;\n\n-- Ver estrutura completa de uma tabela\n\\d+ {table_name}\n\n-- Listar todos os ENUMs do banco\nSELECT n.nspname AS schema, t.typname AS type\nFROM pg_type t\nJOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\nWHERE t.typtype = 'e';\n```\n\n---\n\n**IMPORTANTE:** Sempre use **@pgsql** para conectar ao banco real. N√£o invente estruturas.\n"
}

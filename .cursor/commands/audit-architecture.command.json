{
  "name": "audit-architecture",
  "description": "Audita todo o sistema e aponta viola√ß√µes de arquitetura (acoplamento, duplicidade, viola√ß√µes de SOLID, etc.)",
  "prompt": "# üîç AUDITORIA DE ARQUITETURA\n\nVoc√™ deve realizar uma **auditoria completa** do sistema **BARBER-ANALYTICS-PRO** e identificar viola√ß√µes dos princ√≠pios de **Clean Architecture**, **SOLID**, **DDD** e **CQRS**.\n\n---\n\n## üéØ Objetivo\n\nIdentificar e reportar:\n1. ‚ùå **Viola√ß√µes de Clean Architecture**\n2. ‚ùå **Viola√ß√µes de SOLID**\n3. ‚ùå **Acoplamento desnecess√°rio**\n4. ‚ùå **C√≥digo duplicado**\n5. ‚ùå **Inconsist√™ncias de nomenclatura**\n6. ‚ùå **DTOs mal implementados**\n7. ‚ùå **Services acessando banco diretamente**\n8. ‚ùå **Componentes React chamando Repository**\n9. ‚ùå **Falta de valida√ß√£o**\n10. ‚ùå **Seguran√ßa (RLS, SQL Injection, XSS)**\n\n---\n\n## üìã Checklist de Auditoria\n\n### **1. Clean Architecture**\n\n#### **1.1. Depend√™ncias Invertidas**\n```javascript\n// ‚ùå ERRADO: Service depende de implementa√ß√£o concreta\nimport { supabase } from './supabase';\nclass FinanceiroService {\n  async create(data) {\n    return await supabase.from('revenues').insert(data);\n  }\n}\n\n// ‚úÖ CORRETO: Service depende de abstra√ß√£o (Repository)\nimport revenueRepository from '../repositories/revenueRepository';\nclass FinanceiroService {\n  async create(data) {\n    return await revenueRepository.create(data);\n  }\n}\n```\n\n**Comando de busca:**\n```bash\n# Procurar Services que importam 'supabase' diretamente\ngrep -r \"import.*supabase\" src/services/ --exclude=\"supabase.js\"\n```\n\n#### **1.2. Camadas Bem Definidas**\n\nVerificar se as camadas est√£o isoladas:\n\n```\n‚úÖ CORRETO:\nPage ‚Üí Hook ‚Üí Service ‚Üí Repository ‚Üí Supabase\n\n‚ùå ERRADO:\nPage ‚Üí Service ‚Üí Supabase (pulou Repository)\nPage ‚Üí Repository (pulou Service E Hook)\nHook ‚Üí Repository (pulou Service)\n```\n\n**Comando de busca:**\n```bash\n# Procurar hooks que importam repositories\ngrep -r \"import.*Repository\" src/hooks/\n\n# Procurar pages que importam services diretamente\ngrep -r \"import.*Service\" src/pages/\n```\n\n---\n\n### **2. SOLID**\n\n#### **2.1. Single Responsibility Principle (SRP)**\n\n```javascript\n// ‚ùå ERRADO: Service fazendo valida√ß√£o + persist√™ncia + envio de email\nclass FinanceiroService {\n  async createReceita(data) {\n    // Valida√ß√£o\n    if (!data.value) throw new Error('Invalid');\n    \n    // Persist√™ncia\n    await supabase.from('revenues').insert(data);\n    \n    // Email (responsabilidade extra!)\n    await sendEmail(data.user_email, 'Receita criada');\n  }\n}\n\n// ‚úÖ CORRETO: Service apenas orquestra, delegando responsabilidades\nclass FinanceiroService {\n  async createReceita(data) {\n    const dto = new CreateRevenueDTO(data);\n    dto.validate(); // DTO valida\n    const result = await revenueRepository.create(dto.toDatabase()); // Repository persiste\n    await emailService.sendConfirmation(result.data); // EmailService envia\n    return result;\n  }\n}\n```\n\n**Comando de busca:**\n```bash\n# Procurar services com mais de 300 linhas (poss√≠vel viola√ß√£o SRP)\nfind src/services -name \"*.js\" -exec wc -l {} \\; | awk '$1 > 300 {print $2, \"(\", $1, \"linhas)\"}'\n```\n\n#### **2.2. Open/Closed Principle (OCP)**\n\n```javascript\n// ‚ùå ERRADO: Precisa modificar fun√ß√£o para adicionar novo tipo\nfunction calculateFee(type) {\n  if (type === 'credit_card') return 3.5;\n  if (type === 'debit_card') return 2.0;\n  // Precisa modificar para adicionar 'pix'\n}\n\n// ‚úÖ CORRETO: Extens√≠vel sem modificar c√≥digo existente\nconst FEE_STRATEGIES = {\n  credit_card: 3.5,\n  debit_card: 2.0,\n  pix: 0.0 // Adiciona sem modificar l√≥gica\n};\n\nfunction calculateFee(type) {\n  return FEE_STRATEGIES[type] || 0;\n}\n```\n\n#### **2.3. Liskov Substitution Principle (LSP)**\n\nVerificar se classes derivadas podem substituir base sem quebrar.\n\n#### **2.4. Interface Segregation Principle (ISP)**\n\nVerificar se interfaces/DTOs n√£o for√ßam implementa√ß√£o de m√©todos desnecess√°rios.\n\n#### **2.5. Dependency Inversion Principle (DIP)**\n\nJ√° coberto em Clean Architecture (1.1).\n\n---\n\n### **3. Acoplamento**\n\n#### **3.1. Acoplamento Temporal**\n\n```javascript\n// ‚ùå ERRADO: Ordem de chamadas importa\nawait service.createReceita(data);\nawait service.updateMonthlySummary(); // Precisa ser chamado depois!\n\n// ‚úÖ CORRETO: Service atualiza sum√°rio automaticamente\nawait service.createReceita(data);\n// updateMonthlySummary() √© chamado internamente ou via trigger no BD\n```\n\n#### **3.2. Acoplamento de Dados**\n\n```javascript\n// ‚ùå ERRADO: Componente conhece estrutura interna do banco\nfunction Component() {\n  const data = await fetch('/api/revenues');\n  return <div>{data.revenues[0].gross_amount}</div>; // Campo do banco\n}\n\n// ‚úÖ CORRETO: Componente usa DTO com campos abstra√≠dos\nfunction Component() {\n  const { data } = useReceitas();\n  return <div>{data[0].value}</div>; // Campo do DTO\n}\n```\n\n---\n\n### **4. C√≥digo Duplicado**\n\n**Comando de busca:**\n```bash\n# Procurar fun√ß√µes/blocos duplicados com jscpd\nnpx jscpd src/ --min-lines 10 --min-tokens 50\n\n# Procurar imports duplicados\ngrep -rh \"^import\" src/ | sort | uniq -c | sort -rn | head -20\n```\n\n**Padr√µes comuns de duplica√ß√£o:**\n\n```javascript\n// ‚ùå DUPLICADO em m√∫ltiplos services\nif (!data.value || data.value <= 0) {\n  return { error: 'Valor deve ser maior que zero' };\n}\n\n// ‚úÖ CORRETO: Extrair para validator/DTO\nclass BaseDTO {\n  validatePositiveNumber(value, fieldName) {\n    if (!value || value <= 0) {\n      throw new Error(`${fieldName} deve ser maior que zero`);\n    }\n  }\n}\n```\n\n---\n\n### **5. Inconsist√™ncias de Nomenclatura**\n\n**Verificar:**\n\n| Tipo | Padr√£o Correto | Exemplo |\n|------|----------------|----------|\n| Arquivos | kebab-case | `financeiro-service.js` |\n| Classes | PascalCase | `FinanceiroService` |\n| Fun√ß√µes | camelCase | `createReceita()` |\n| Constantes | UPPER_SNAKE_CASE | `ALLOWED_REVENUE_COLUMNS` |\n| Componentes React | PascalCase | `ReceitasPage` |\n| Hooks | camelCase com 'use' | `useReceitas` |\n\n**Comando de busca:**\n```bash\n# Procurar arquivos com nomes inconsistentes\nfind src/ -name \"*[A-Z]*\" # PascalCase (incorreto para arquivos)\nfind src/ -name \"*_*\" # snake_case (incorreto para JavaScript)\n```\n\n---\n\n### **6. DTOs Mal Implementados**\n\n#### **6.1. DTO sem Valida√ß√£o**\n\n```javascript\n// ‚ùå ERRADO: DTO apenas mapeia, n√£o valida\nclass CreateRevenueDTO {\n  constructor(data) {\n    this.value = data.value;\n    this.type = data.type;\n  }\n}\n\n// ‚úÖ CORRETO: DTO valida campos\nclass CreateRevenueDTO {\n  constructor(data) {\n    this.value = data.value;\n    this.type = data.type;\n  }\n  \n  validate() {\n    const errors = [];\n    if (!this.value || this.value <= 0) {\n      errors.push('Valor deve ser maior que zero');\n    }\n    return { isValid: errors.length === 0, errors };\n  }\n}\n```\n\n#### **6.2. DTO sem Whitelist/Blacklist**\n\n```javascript\n// ‚ùå ERRADO: Aceita qualquer campo (SQL Injection potencial)\ntoDatabase() {\n  return this; // Retorna TUDO, incluindo campos maliciosos\n}\n\n// ‚úÖ CORRETO: Aplica whitelist\ntoDatabase() {\n  const dbObject = {};\n  for (const [key, value] of Object.entries(this)) {\n    if (ALLOWED_COLUMNS.includes(key)) {\n      dbObject[key] = value;\n    }\n  }\n  return dbObject;\n}\n```\n\n**Comando de busca:**\n```bash\n# Procurar DTOs sem m√©todo validate()\nfor file in src/dtos/*.js; do\n  if ! grep -q \"validate()\" \"$file\"; then\n    echo \"DTO sem validate(): $file\"\n  fi\ndone\n```\n\n---\n\n### **7. Services Acessando Banco Diretamente**\n\n**Comando de busca:**\n```bash\n# Procurar Services com queries diretas\ngrep -r \"\\.from(\\|.select(\\|.insert(\\|.update(\\|.delete(\" src/services/ --exclude=\"supabase.js\"\n```\n\n**Se encontrar:** Refatorar para usar Repository.\n\n---\n\n### **8. Componentes React Violando Camadas**\n\n```javascript\n// ‚ùå ERRADO: Page chamando Service diretamente\nimport financeiroService from './services/financeiroService';\n\nfunction ReceitasPage() {\n  useEffect(() => {\n    financeiroService.getReceitas().then(setData);\n  }, []);\n}\n\n// ‚úÖ CORRETO: Page usa Hook\nimport { useReceitas } from './hooks/useReceitas';\n\nfunction ReceitasPage() {\n  const { data, loading } = useReceitas();\n}\n```\n\n**Comando de busca:**\n```bash\n# Procurar Pages importando Services\ngrep -r \"import.*Service\" src/pages/\n```\n\n---\n\n### **9. Falta de Valida√ß√£o**\n\n**Verificar:**\n\n- [ ] DTOs validam tipos (string, number, date)\n- [ ] DTOs validam ranges (value > 0, length <= 255)\n- [ ] DTOs validam ENUMs\n- [ ] DTOs validam UUIDs\n- [ ] Services rejeitam dados inv√°lidos ANTES de persistir\n\n---\n\n### **10. Seguran√ßa**\n\n#### **10.1. RLS no Supabase**\n\n**Verificar:**\n\n```sql\n-- Todas as tabelas devem ter RLS ativo\nSELECT tablename, rowsecurity \nFROM pg_tables \nWHERE schemaname = 'public' \n  AND rowsecurity = FALSE;\n```\n\nSe retornar tabelas, ativar RLS:\n\n```sql\nALTER TABLE {table_name} ENABLE ROW LEVEL SECURITY;\n```\n\n#### **10.2. SQL Injection**\n\n```javascript\n// ‚ùå ERRADO: Concatena√ß√£o de strings (SQL Injection)\nconst query = `SELECT * FROM revenues WHERE id = '${userId}'`;\n\n// ‚úÖ CORRETO: Uso de prepared statements (Supabase j√° protege)\nconst { data } = await supabase\n  .from('revenues')\n  .select('*')\n  .eq('id', userId); // Supabase sanitiza automaticamente\n```\n\n#### **10.3. XSS (Cross-Site Scripting)**\n\n```jsx\n// ‚ùå ERRADO: Renderizar HTML sem sanitizar\nfunction Component({ userInput }) {\n  return <div dangerouslySetInnerHTML={{ __html: userInput }} />;\n}\n\n// ‚úÖ CORRETO: React escapa automaticamente\nfunction Component({ userInput }) {\n  return <div>{userInput}</div>;\n}\n```\n\n---\n\n## üìä Relat√≥rio de Auditoria\n\n### **Template de Relat√≥rio**\n\n```markdown\n# üìã RELAT√ìRIO DE AUDITORIA DE ARQUITETURA\n\n**Data:** {data_atual}\n**Vers√£o do Sistema:** {versao}\n**Auditor:** Claude AI\n\n---\n\n## üéØ Resumo Executivo\n\n| Categoria | Viola√ß√µes Encontradas | Severidade |\n|-----------|----------------------|------------|\n| Clean Architecture | {numero} | {Alta/M√©dia/Baixa} |\n| SOLID | {numero} | {Alta/M√©dia/Baixa} |\n| Acoplamento | {numero} | {Alta/M√©dia/Baixa} |\n| C√≥digo Duplicado | {numero} | {Alta/M√©dia/Baixa} |\n| Nomenclatura | {numero} | {Alta/M√©dia/Baixa} |\n| DTOs | {numero} | {Alta/M√©dia/Baixa} |\n| Seguran√ßa | {numero} | {Alta/M√©dia/Baixa} |\n\n**Total de Viola√ß√µes:** {total}\n**Score de Qualidade:** {score}/100\n\n---\n\n## ‚ùå Viola√ß√µes Encontradas\n\n### **1. Clean Architecture**\n\n#### Viola√ß√£o #1: Service acessando banco diretamente\n- **Arquivo:** `src/services/financeiroService.js:45`\n- **Severidade:** üî¥ Alta\n- **Descri√ß√£o:** Service importa `supabase` e faz query direta\n- **C√≥digo:**\n  ```javascript\n  const { data } = await supabase.from('revenues').select('*');\n  ```\n- **Solu√ß√£o:** Criar `RevenueRepository` e delegar acesso ao banco\n\n---\n\n### **2. SOLID**\n\n#### Viola√ß√£o #2: SRP - Service com m√∫ltiplas responsabilidades\n- **Arquivo:** `src/services/financeiroService.js`\n- **Severidade:** üü° M√©dia\n- **Descri√ß√£o:** Service faz valida√ß√£o + persist√™ncia + envio de email\n- **Solu√ß√£o:** Extrair `EmailService` separado\n\n---\n\n## ‚úÖ Recomenda√ß√µes\n\n1. **Criar Repositories faltantes**\n   - ExpenseRepository\n   - ClientRepository\n   - InventoryRepository\n\n2. **Refatorar Services grandes**\n   - Quebrar `financeiroService.js` (500 linhas) em m√∫ltiplos services\n\n3. **Adicionar valida√ß√£o em DTOs**\n   - CreateExpenseDTO est√° sem m√©todo `validate()`\n\n4. **Ativar RLS em tabelas**\n   - Tabelas `clients` e `inventory` sem RLS\n\n5. **Remover c√≥digo duplicado**\n   - Valida√ß√£o de UUID duplicada em 5 arquivos\n   - Extrair para `src/utils/validators.js`\n\n---\n\n## üìà M√©tricas de Qualidade\n\n- **Cobertura de Testes:** {percentage}%\n- **Complexidade Ciclom√°tica:** {average}\n- **Linhas de C√≥digo:** {total_lines}\n- **Debt T√©cnico:** {tech_debt_hours} horas\n\n---\n\n*Auditoria realizada em {data_hora}*\n```\n\n---\n\n## üöÄ Comandos de An√°lise Autom√°tica\n\n```bash\n# Instalar ferramentas de an√°lise\nnpm install -D eslint jscpd complexity-report\n\n# Executar an√°lises\nnpx eslint src/ --format json > audit-eslint.json\nnpx jscpd src/ --format json > audit-duplicates.json\nnpx cr src/ --format json > audit-complexity.json\n\n# Gerar relat√≥rio consolidado\nnode scripts/generate-audit-report.js\n```\n\n---\n\n## ‚úÖ Checklist Final\n\n- [ ] Auditou Clean Architecture\n- [ ] Auditou SOLID\n- [ ] Auditou acoplamento\n- [ ] Auditou c√≥digo duplicado\n- [ ] Auditou nomenclatura\n- [ ] Auditou DTOs\n- [ ] Auditou seguran√ßa (RLS, SQL Injection, XSS)\n- [ ] Gerou relat√≥rio em Markdown\n- [ ] Salvou relat√≥rio em `docs/AUDIT_REPORT.md`\n- [ ] Criou issues no GitHub para cada viola√ß√£o\n\n---\n\n**IMPORTANTE:** Priorize viola√ß√µes de **seguran√ßa** e **Clean Architecture** antes das demais.\n"
}

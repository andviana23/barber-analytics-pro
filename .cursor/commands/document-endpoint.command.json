{
  "name": "document-endpoint",
  "description": "Gera documenta√ß√£o t√©cnica em Markdown (docs/) descrevendo endpoints, payloads, responses e exemplos de uso",
  "prompt": "# üìö DOCUMENTAR ENDPOINT/SERVI√áO\n\nVoc√™ deve gerar documenta√ß√£o t√©cnica completa em **Markdown** para um endpoint ou servi√ßo do sistema **BARBER-ANALYTICS-PRO**.\n\n## üìã Entrada Esperada\n\nO usu√°rio fornecer√°:\n1. **Nome do servi√ßo** (ex: `financeiroService`, `profissionaisService`)\n2. **M√©todos a documentar** (ex: `createReceita`, `getReceitas`, `updateReceita`)\n3. **Exemplos de uso** (opcional)\n\n---\n\n## üìù Estrutura da Documenta√ß√£o\n\n### **Template Base**\n\n```markdown\n# üìò {ServiceName} - Documenta√ß√£o T√©cnica\n\n> **M√≥dulo:** {ModuleName}\n> **Vers√£o:** 1.0.0\n> **√öltima Atualiza√ß√£o:** {data_atual}\n\n---\n\n## üéØ Vis√£o Geral\n\nO **{ServiceName}** √© respons√°vel por:\n- {Responsabilidade 1}\n- {Responsabilidade 2}\n- {Responsabilidade 3}\n\n### **Arquitetura**\n\n```\nUI Component ‚Üí Custom Hook ‚Üí Service Layer ‚Üí Repository ‚Üí Supabase\n```\n\n**Camadas:**\n- **Service:** `src/services/{serviceName}.js`\n- **Repository:** `src/repositories/{repositoryName}.js`\n- **DTO:** `src/dtos/{dtoName}.js`\n- **Hook:** `src/hooks/use{HookName}.js`\n\n---\n\n## üìã M√©todos Dispon√≠veis\n\n### **1. create{Entity}()**\n\n**Descri√ß√£o:** Cria um novo registro no banco de dados.\n\n**Assinatura:**\n```javascript\nasync create{Entity}(data: Object): Promise<{data: Object|null, error: string|null}>\n```\n\n**Par√¢metros:**\n\n| Campo | Tipo | Obrigat√≥rio | Descri√ß√£o |\n|-------|------|-------------|------------|\n| `field1` | `string` | ‚úÖ Sim | Descri√ß√£o do campo 1 |\n| `field2` | `number` | ‚úÖ Sim | Descri√ß√£o do campo 2 |\n| `field3` | `string` | ‚ùå N√£o | Descri√ß√£o do campo 3 (opcional) |\n| `unit_id` | `UUID` | ‚úÖ Sim | ID da unidade (isolamento multi-tenant) |\n| `user_id` | `UUID` | ‚ùå N√£o | ID do usu√°rio (preenchido automaticamente) |\n\n**Valida√ß√µes:**\n- `field1` n√£o pode estar vazio\n- `field2` deve ser um n√∫mero maior que zero\n- `field3` deve ter no m√°ximo 255 caracteres\n- `unit_id` deve ser um UUID v√°lido\n\n**Exemplo de Request:**\n```javascript\nconst result = await financeiroService.createReceita({\n  type: 'service',\n  value: 150.00,\n  date: '2025-10-18',\n  source: 'Corte de cabelo',\n  unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'\n});\n```\n\n**Exemplo de Response (Sucesso):**\n```javascript\n{\n  data: {\n    id: 'f1e2d3c4-b5a6-7890-1234-567890abcdef',\n    type: 'service',\n    value: 150.00,\n    date: '2025-10-18',\n    source: 'Corte de cabelo',\n    unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\n    status: 'Pending',\n    created_at: '2025-10-18T14:30:00.000Z'\n  },\n  error: null\n}\n```\n\n**Exemplo de Response (Erro):**\n```javascript\n{\n  data: null,\n  error: 'Campo \"value\" deve ser maior que zero | Campo \"unit_id\" √© obrigat√≥rio'\n}\n```\n\n**C√≥digos de Erro:**\n\n| C√≥digo | Mensagem | Causa |\n|--------|----------|-------|\n| `VALIDATION_ERROR` | Campo obrigat√≥rio ausente | Falta campo obrigat√≥rio no payload |\n| `INVALID_TYPE` | Tipo de dado inv√°lido | Valor n√£o corresponde ao tipo esperado |\n| `CONSTRAINT_VIOLATION` | Viola√ß√£o de constraint | Valor viola regra de neg√≥cio (ex: valor <= 0) |\n| `DUPLICATE_KEY` | Registro duplicado | Tentativa de criar registro que j√° existe |\n| `FOREIGN_KEY_VIOLATION` | Refer√™ncia inv√°lida | unit_id n√£o existe na tabela units |\n\n---\n\n### **2. getAll()**\n\n**Descri√ß√£o:** Busca todos os registros com suporte a filtros e pagina√ß√£o.\n\n**Assinatura:**\n```javascript\nasync getAll(\n  filters: Object, \n  pagination: {page: number, limit: number}\n): Promise<{data: Array, error: string|null, count: number}>\n```\n\n**Filtros Dispon√≠veis:**\n\n| Filtro | Tipo | Descri√ß√£o |\n|--------|------|------------|\n| `unit_id` | `UUID` | Filtrar por unidade |\n| `start_date` | `string (YYYY-MM-DD)` | Data inicial |\n| `end_date` | `string (YYYY-MM-DD)` | Data final |\n| `status` | `string` | Status do registro |\n| `type` | `string` | Tipo do registro |\n\n**Exemplo de Request:**\n```javascript\nconst result = await financeiroService.getReceitas(\n  {\n    unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\n    start_date: '2025-10-01',\n    end_date: '2025-10-31',\n    status: 'Pending'\n  },\n  { page: 1, limit: 50 }\n);\n```\n\n**Exemplo de Response:**\n```javascript\n{\n  data: [\n    {\n      id: 'f1e2d3c4-b5a6-7890-1234-567890abcdef',\n      type: 'service',\n      value: 150.00,\n      date: '2025-10-18',\n      status: 'Pending',\n      created_at: '2025-10-18T14:30:00.000Z'\n    },\n    // ... mais registros\n  ],\n  error: null,\n  count: 127 // Total de registros (para pagina√ß√£o)\n}\n```\n\n---\n\n### **3. getById()**\n\n**Descri√ß√£o:** Busca um registro espec√≠fico por ID.\n\n**Assinatura:**\n```javascript\nasync getById(id: UUID): Promise<{data: Object|null, error: string|null}>\n```\n\n**Par√¢metros:**\n\n| Campo | Tipo | Descri√ß√£o |\n|-------|------|------------|\n| `id` | `UUID` | ID do registro |\n\n**Exemplo de Request:**\n```javascript\nconst result = await financeiroService.getReceitaById(\n  'f1e2d3c4-b5a6-7890-1234-567890abcdef'\n);\n```\n\n**Exemplo de Response:**\n```javascript\n{\n  data: {\n    id: 'f1e2d3c4-b5a6-7890-1234-567890abcdef',\n    type: 'service',\n    value: 150.00,\n    // ... demais campos\n  },\n  error: null\n}\n```\n\n---\n\n### **4. update()**\n\n**Descri√ß√£o:** Atualiza um registro existente.\n\n**Assinatura:**\n```javascript\nasync update(id: UUID, data: Object): Promise<{data: Object|null, error: string|null}>\n```\n\n**Campos Atualiz√°veis:**\n\n| Campo | Tipo | Descri√ß√£o |\n|-------|------|------------|\n| `field1` | `string` | Campo 1 |\n| `field2` | `number` | Campo 2 |\n| `status` | `string` | Status do registro |\n\n**Exemplo de Request:**\n```javascript\nconst result = await financeiroService.updateReceita(\n  'f1e2d3c4-b5a6-7890-1234-567890abcdef',\n  {\n    status: 'Received',\n    actual_receipt_date: '2025-10-20'\n  }\n);\n```\n\n---\n\n### **5. delete()**\n\n**Descri√ß√£o:** Deleta um registro (soft delete - marca como inativo).\n\n**Assinatura:**\n```javascript\nasync delete(id: UUID): Promise<{success: boolean, error: string|null}>\n```\n\n**Exemplo de Request:**\n```javascript\nconst result = await financeiroService.deleteReceita(\n  'f1e2d3c4-b5a6-7890-1234-567890abcdef'\n);\n```\n\n**Exemplo de Response:**\n```javascript\n{\n  success: true,\n  error: null\n}\n```\n\n---\n\n## üîí Seguran√ßa e RLS\n\n### **Row Level Security (RLS)**\n\nTodos os endpoints respeitam as pol√≠ticas RLS configuradas no Supabase:\n\n1. **Isolamento por Unidade:**\n   - Usu√°rios s√≥ acessam dados da(s) unidade(s) vinculada(s)\n   - Implementado via policy: `unit_id IN (SELECT unit_id FROM professionals WHERE user_id = auth.uid())`\n\n2. **Acesso Admin:**\n   - Usu√°rios com `role = 'admin'` t√™m acesso a todas as unidades\n   - Implementado via policy: `get_user_role() = 'admin'`\n\n3. **Autentica√ß√£o:**\n   - Todos os endpoints requerem autentica√ß√£o via Supabase Auth\n   - Token JWT deve ser enviado no header `Authorization: Bearer <token>`\n\n---\n\n## ‚ö° Performance\n\n### **Pagina√ß√£o**\n\nPara evitar sobrecarga, sempre use pagina√ß√£o em listas grandes:\n\n```javascript\n// ‚úÖ BOM: Com pagina√ß√£o\nconst result = await service.getAll(filters, { page: 1, limit: 50 });\n\n// ‚ùå RUIM: Sem pagina√ß√£o (pode retornar milhares de registros)\nconst result = await service.getAll(filters);\n```\n\n### **Filtros**\n\nSempre filtre por `unit_id` para aproveitar √≠ndices otimizados:\n\n```javascript\n// ‚úÖ BOM: Com unit_id\nconst result = await service.getAll({ unit_id: 'abc123' });\n\n// ‚ùå RUIM: Sem unit_id (full table scan)\nconst result = await service.getAll({});\n```\n\n---\n\n## üß™ Testes\n\n### **Testes Unit√°rios**\n\nLocaliza√ß√£o: `src/__tests__/services/{serviceName}.spec.js`\n\n```javascript\nimport financeiroService from '../financeiroService';\n\ndescribe('FinanceiroService', () => {\n  it('should create receita with valid data', async () => {\n    const data = {\n      type: 'service',\n      value: 150.00,\n      date: '2025-10-18',\n      unit_id: 'abc123'\n    };\n    \n    const result = await financeiroService.createReceita(data);\n    \n    expect(result.error).toBeNull();\n    expect(result.data).toHaveProperty('id');\n    expect(result.data.value).toBe(150.00);\n  });\n  \n  it('should reject negative value', async () => {\n    const data = {\n      type: 'service',\n      value: -100.00, // Valor negativo\n      date: '2025-10-18',\n      unit_id: 'abc123'\n    };\n    \n    const result = await financeiroService.createReceita(data);\n    \n    expect(result.error).toContain('maior que zero');\n    expect(result.data).toBeNull();\n  });\n});\n```\n\n---\n\n## üìä Exemplos de Uso Completos\n\n### **Exemplo 1: Criar e Listar Receitas**\n\n```javascript\nimport financeiroService from './services/financeiroService';\n\n// Criar receita\nconst createResult = await financeiroService.createReceita({\n  type: 'service',\n  value: 150.00,\n  date: '2025-10-18',\n  source: 'Corte de cabelo',\n  unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'\n});\n\nif (createResult.error) {\n  console.error('Erro ao criar:', createResult.error);\n} else {\n  console.log('Receita criada:', createResult.data.id);\n}\n\n// Listar receitas do m√™s\nconst listResult = await financeiroService.getReceitas(\n  {\n    unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\n    start_date: '2025-10-01',\n    end_date: '2025-10-31'\n  },\n  { page: 1, limit: 50 }\n);\n\nconsole.log(`Total de receitas: ${listResult.count}`);\nconsole.log(`Receitas na p√°gina: ${listResult.data.length}`);\n```\n\n### **Exemplo 2: Hook React**\n\n```jsx\nimport { useReceitas } from './hooks/useReceitas';\n\nfunction ReceitasPage() {\n  const { data, loading, error, create, refetch } = useReceitas({\n    unit_id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\n    start_date: '2025-10-01',\n    end_date: '2025-10-31'\n  });\n\n  const handleCreate = async (formData) => {\n    const result = await create(formData);\n    if (result.error) {\n      alert('Erro: ' + result.error);\n    } else {\n      alert('Receita criada com sucesso!');\n      refetch(); // Atualizar lista\n    }\n  };\n\n  if (loading) return <div>Carregando...</div>;\n  if (error) return <div>Erro: {error}</div>;\n\n  return (\n    <div>\n      <h1>Receitas ({data.length})</h1>\n      <ul>\n        {data.map(receita => (\n          <li key={receita.id}>\n            {receita.source} - R$ {receita.value.toFixed(2)}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n---\n\n## üîó Refer√™ncias\n\n- [ARCHITECTURE.md](./ARCHITECTURE.md)\n- [DATABASE_SCHEMA.md](./DATABASE_SCHEMA.md)\n- [FINANCIAL_MODULE.md](./FINANCIAL_MODULE.md)\n- [API Reference](./API_REFERENCE.md)\n\n---\n\n*√öltima atualiza√ß√£o: {data_atual}*\n```\n\n---\n\n## ‚úÖ Checklist de Documenta√ß√£o\n\n- [ ] Vis√£o geral do servi√ßo\n- [ ] Diagrama de arquitetura\n- [ ] Lista de m√©todos dispon√≠veis\n- [ ] Assinatura de cada m√©todo\n- [ ] Par√¢metros e tipos\n- [ ] Valida√ß√µes aplicadas\n- [ ] Exemplos de request/response\n- [ ] C√≥digos de erro\n- [ ] Se√ß√£o de seguran√ßa (RLS)\n- [ ] Se√ß√£o de performance\n- [ ] Exemplos de uso completos\n- [ ] Testes unit√°rios\n- [ ] Refer√™ncias cruzadas\n\n---\n\n**IMPORTANTE:** Salve o arquivo em `docs/services/{ServiceName}.md`\n"
}

{
  "name": "generate-sql-rls",
  "description": "Cria uma tabela no Supabase com pol√≠ticas RLS autom√°ticas (unit_id + auth.uid() para isolamento multi-tenant)",
  "prompt": "# üîê CRIAR TABELA COM RLS AUTOM√ÅTICO\n\nVoc√™ deve criar uma **tabela no Supabase** com **Row Level Security (RLS)** configurado automaticamente para garantir isolamento multi-tenant.\n\n## üìã Entrada Esperada\n\nO usu√°rio fornecer√°:\n1. **Nome da tabela** (ex: `clients`, `inventory`, `reports`)\n2. **Colunas da tabela** com tipos e constraints\n3. **Relacionamentos** (Foreign Keys)\n4. **N√≠vel de isolamento** (por unidade, por usu√°rio, h√≠brido)\n\n---\n\n## üèóÔ∏è Estrutura SQL a Ser Gerada\n\n### **1. CREATE TABLE**\n\n```sql\n-- ============================================\n-- TABELA: {table_name}\n-- Descri√ß√£o: {descri√ß√£o_da_entidade}\n-- Criado em: {data_atual}\n-- ============================================\n\nCREATE TABLE {table_name} (\n  -- Identificador √∫nico\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  \n  -- Campos obrigat√≥rios\n  campo_obrigatorio_1 VARCHAR(255) NOT NULL,\n  campo_obrigatorio_2 NUMERIC(12,2) NOT NULL,\n  \n  -- Campos opcionais\n  campo_opcional_1 TEXT,\n  campo_opcional_2 DATE,\n  \n  -- Relacionamentos (FKs para isolamento)\n  unit_id UUID NOT NULL REFERENCES units(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  \n  -- Metadados\n  created_at TIMESTAMP DEFAULT NOW() NOT NULL,\n  updated_at TIMESTAMP DEFAULT NOW() NOT NULL,\n  is_active BOOLEAN DEFAULT TRUE NOT NULL,\n  \n  -- Constraints\n  CONSTRAINT {table_name}_campo_obrigatorio_1_not_empty \n    CHECK (TRIM(campo_obrigatorio_1) != ''),\n  CONSTRAINT {table_name}_campo_obrigatorio_2_positive \n    CHECK (campo_obrigatorio_2 > 0)\n);\n\n-- Coment√°rios da tabela\nCOMMENT ON TABLE {table_name} IS '{Descri√ß√£o da entidade de neg√≥cio}';\nCOMMENT ON COLUMN {table_name}.campo_obrigatorio_1 IS '{Descri√ß√£o do campo}';\n```\n\n---\n\n### **2. INDEXES**\n\n```sql\n-- ============================================\n-- √çNDICES ESTRAT√âGICOS\n-- ============================================\n\n-- √çndice para isolamento por unidade (principal)\nCREATE INDEX idx_{table_name}_unit_id \n  ON {table_name}(unit_id);\n\n-- √çndice para isolamento por usu√°rio\nCREATE INDEX idx_{table_name}_user_id \n  ON {table_name}(user_id);\n\n-- √çndice composto para queries frequentes\nCREATE INDEX idx_{table_name}_unit_created \n  ON {table_name}(unit_id, created_at DESC);\n\n-- √çndice para soft delete\nCREATE INDEX idx_{table_name}_active \n  ON {table_name}(is_active) \n  WHERE is_active = TRUE;\n\n-- √çndices para campos de busca\nCREATE INDEX idx_{table_name}_campo_busca \n  ON {table_name}(campo_busca);\n```\n\n---\n\n### **3. TRIGGERS**\n\n```sql\n-- ============================================\n-- TRIGGERS AUTOM√ÅTICOS\n-- ============================================\n\n-- Trigger para atualizar updated_at automaticamente\nCREATE OR REPLACE FUNCTION fn_update_{table_name}_timestamp()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_update_{table_name}_timestamp\n  BEFORE UPDATE ON {table_name}\n  FOR EACH ROW\n  EXECUTE FUNCTION fn_update_{table_name}_timestamp();\n\n-- Trigger para valida√ß√µes customizadas (se necess√°rio)\nCREATE OR REPLACE FUNCTION fn_validate_{table_name}()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Valida√ß√£o customizada aqui\n  IF NEW.campo_obrigatorio_2 <= 0 THEN\n    RAISE EXCEPTION 'Campo deve ser maior que zero';\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_validate_{table_name}\n  BEFORE INSERT OR UPDATE ON {table_name}\n  FOR EACH ROW\n  EXECUTE FUNCTION fn_validate_{table_name}();\n```\n\n---\n\n### **4. ROW LEVEL SECURITY (RLS)**\n\n#### **A) Habilitar RLS**\n\n```sql\n-- ============================================\n-- ATIVAR ROW LEVEL SECURITY\n-- ============================================\n\nALTER TABLE {table_name} ENABLE ROW LEVEL SECURITY;\n```\n\n#### **B) Pol√≠ticas de Isolamento por Unidade**\n\n```sql\n-- ============================================\n-- POL√çTICAS RLS: ISOLAMENTO POR UNIDADE\n-- ============================================\n\n-- Pol√≠tica: Usu√°rios s√≥ veem registros da sua unidade\nCREATE POLICY \"policy_{table_name}_unit_isolation\" \n  ON {table_name}\n  FOR SELECT\n  USING (\n    unit_id IN (\n      SELECT unit_id \n      FROM professionals \n      WHERE user_id = auth.uid()\n    )\n  );\n\n-- Pol√≠tica: Usu√°rios s√≥ criam registros na sua unidade\nCREATE POLICY \"policy_{table_name}_unit_insert\" \n  ON {table_name}\n  FOR INSERT\n  WITH CHECK (\n    unit_id IN (\n      SELECT unit_id \n      FROM professionals \n      WHERE user_id = auth.uid()\n    )\n  );\n\n-- Pol√≠tica: Usu√°rios s√≥ atualizam registros da sua unidade\nCREATE POLICY \"policy_{table_name}_unit_update\" \n  ON {table_name}\n  FOR UPDATE\n  USING (\n    unit_id IN (\n      SELECT unit_id \n      FROM professionals \n      WHERE user_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    unit_id IN (\n      SELECT unit_id \n      FROM professionals \n      WHERE user_id = auth.uid()\n    )\n  );\n\n-- Pol√≠tica: Usu√°rios s√≥ deletam registros da sua unidade\nCREATE POLICY \"policy_{table_name}_unit_delete\" \n  ON {table_name}\n  FOR DELETE\n  USING (\n    unit_id IN (\n      SELECT unit_id \n      FROM professionals \n      WHERE user_id = auth.uid()\n    )\n  );\n```\n\n#### **C) Pol√≠tica de Acesso Admin (Override)**\n\n```sql\n-- ============================================\n-- POL√çTICA ESPECIAL: ADMIN TEM ACESSO TOTAL\n-- ============================================\n\nCREATE POLICY \"policy_{table_name}_admin_full_access\" \n  ON {table_name}\n  FOR ALL\n  USING (\n    EXISTS (\n      SELECT 1 \n      FROM professionals \n      WHERE user_id = auth.uid() \n        AND role = 'admin'\n    )\n  );\n```\n\n#### **D) Pol√≠tica de Isolamento por Usu√°rio (alternativa)**\n\n```sql\n-- ============================================\n-- POL√çTICAS RLS: ISOLAMENTO POR USU√ÅRIO\n-- (Use quando cada usu√°rio possui dados pr√≥prios)\n-- ============================================\n\n-- Pol√≠tica: Usu√°rios s√≥ veem seus pr√≥prios registros\nCREATE POLICY \"policy_{table_name}_user_own_data\" \n  ON {table_name}\n  FOR ALL\n  USING (user_id = auth.uid());\n```\n\n---\n\n### **5. FUNCTIONS DE SUPORTE**\n\n```sql\n-- ============================================\n-- FUN√á√ïES AUXILIARES\n-- ============================================\n\n-- Fun√ß√£o para obter role do usu√°rio atual\nCREATE OR REPLACE FUNCTION fn_get_user_role()\nRETURNS user_role\nLANGUAGE SQL STABLE SECURITY DEFINER AS $$\n  SELECT COALESCE(\n    (SELECT role FROM professionals WHERE user_id = auth.uid()),\n    'barbeiro'::user_role\n  );\n$$;\n\n-- Fun√ß√£o para obter unit_id do usu√°rio atual\nCREATE OR REPLACE FUNCTION fn_get_user_unit_id()\nRETURNS UUID\nLANGUAGE SQL STABLE SECURITY DEFINER AS $$\n  SELECT unit_id FROM professionals WHERE user_id = auth.uid();\n$$;\n\n-- Fun√ß√£o para verificar se usu√°rio tem acesso √† unidade\nCREATE OR REPLACE FUNCTION fn_user_has_access_to_unit(p_unit_id UUID)\nRETURNS BOOLEAN\nLANGUAGE SQL STABLE SECURITY DEFINER AS $$\n  SELECT EXISTS (\n    SELECT 1 \n    FROM professionals \n    WHERE user_id = auth.uid() \n      AND unit_id = p_unit_id\n  );\n$$;\n```\n\n---\n\n### **6. GRANTS (Permiss√µes)**\n\n```sql\n-- ============================================\n-- PERMISS√ïES\n-- ============================================\n\n-- Conceder acesso aos usu√°rios autenticados\nGRANT SELECT, INSERT, UPDATE, DELETE ON {table_name} TO authenticated;\n\n-- Conceder acesso √†s sequences (se houver)\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;\n\n-- Revogar acesso p√∫blico\nREVOKE ALL ON {table_name} FROM anon;\nREVOKE ALL ON {table_name} FROM public;\n```\n\n---\n\n## üß™ TESTES DE VALIDA√á√ÉO\n\n```sql\n-- ============================================\n-- TESTES DE RLS\n-- ============================================\n\n-- Teste 1: Verificar se RLS est√° ativo\nSELECT \n  schemaname,\n  tablename,\n  rowsecurity AS rls_enabled\nFROM pg_tables\nWHERE tablename = '{table_name}';\n\n-- Teste 2: Listar pol√≠ticas criadas\nSELECT \n  policyname,\n  cmd AS operation,\n  qual AS using_clause,\n  with_check\nFROM pg_policies\nWHERE tablename = '{table_name}';\n\n-- Teste 3: Simular acesso de um usu√°rio\nDO $$\nDECLARE\n  test_user_id UUID;\n  test_count INTEGER;\nBEGIN\n  -- Criar usu√°rio de teste\n  INSERT INTO auth.users (id, email) \n  VALUES (gen_random_uuid(), 'test@example.com')\n  RETURNING id INTO test_user_id;\n  \n  -- Simular contexto do usu√°rio\n  PERFORM set_config('request.jwt.claims', \n    json_build_object('sub', test_user_id)::text, true);\n  \n  -- Testar isolamento\n  SELECT COUNT(*) INTO test_count FROM {table_name};\n  \n  IF test_count > 0 THEN\n    RAISE EXCEPTION 'RLS FAIL: User can see other unit data';\n  ELSE\n    RAISE NOTICE 'RLS PASS: Proper isolation';\n  END IF;\n  \n  -- Cleanup\n  DELETE FROM auth.users WHERE id = test_user_id;\nEND;\n$$;\n```\n\n---\n\n## üìä VIEWS RECOMENDADAS\n\n```sql\n-- ============================================\n-- VIEW PARA RELAT√ìRIOS\n-- ============================================\n\nCREATE VIEW vw_{table_name}_detailed AS\nSELECT \n  t.*,\n  u.name AS unit_name,\n  p.name AS user_name\nFROM {table_name} t\nLEFT JOIN units u ON u.id = t.unit_id\nLEFT JOIN professionals p ON p.user_id = t.user_id\nWHERE t.is_active = TRUE;\n\n-- Aplicar RLS na view tamb√©m\nALTER VIEW vw_{table_name}_detailed SET (security_invoker = true);\nGRANT SELECT ON vw_{table_name}_detailed TO authenticated;\n```\n\n---\n\n## ‚úÖ Checklist de Cria√ß√£o\n\n- [ ] CREATE TABLE com todos os campos necess√°rios\n- [ ] Constraints (NOT NULL, CHECK, UNIQUE, FK)\n- [ ] √çndices otimizados (unit_id, user_id, compostos)\n- [ ] Triggers (updated_at, valida√ß√µes)\n- [ ] RLS habilitado (ALTER TABLE ENABLE RLS)\n- [ ] Pol√≠ticas de isolamento (SELECT, INSERT, UPDATE, DELETE)\n- [ ] Pol√≠tica de admin (acesso total)\n- [ ] Functions de suporte (get_user_role, get_user_unit_id)\n- [ ] Grants (authenticated) e Revokes (anon, public)\n- [ ] Coment√°rios na tabela e colunas\n- [ ] Testes de valida√ß√£o executados\n- [ ] View de relat√≥rio criada (se necess√°rio)\n\n---\n\n## üîó Refer√™ncias\n\n- [DATABASE_SCHEMA.md](../docs/DATABASE_SCHEMA.md)\n- [Supabase RLS Documentation](https://supabase.com/docs/guides/auth/row-level-security)\n- [PostgreSQL Security Best Practices](https://www.postgresql.org/docs/current/ddl-rowsecurity.html)\n\n---\n\n**IMPORTANTE:** Sempre execute via **@pgsql** no Supabase. Teste as pol√≠ticas RLS antes de ir para produ√ß√£o.\n"
}

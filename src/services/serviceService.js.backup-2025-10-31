/**
 * @file serviceService.js
 * @description Service Layer para Services (Servi칞os) - Business Logic
 * @module Services/Service
 * @author Andrey Viana
 * @date 2025-10-24
 */

import serviceRepository from '../repositories/serviceRepository';
import {
  validateCreateService,
  validateUpdateService,
  calculateCommission,
} from '../dtos/ServiceDTO';
import { toast } from 'react-hot-toast';

/**
 * Roles permitidos para gerenciar servi칞os
 */
const ALLOWED_ROLES = ['gerente', 'administrador'];

/**
 * Service para gerenciar regras de neg칩cio de Services
 * Camada intermedi치ria entre Controller/UI e Repository
 */
class ServiceService {
  /**
   * Valida se o usu치rio tem permiss칚o para gerenciar servi칞os
   *
   * @param {Object} user - Usu치rio autenticado
   * @param {string} user.role - Perfil do usu치rio
   * @returns {boolean} - True se tem permiss칚o
   * @private
   */
  _hasPermission(user) {
    if (!user || !user.role) {
      return false;
    }
    return ALLOWED_ROLES.includes(user.role.toLowerCase());
  }

  /**
   * Cria um novo servi칞o
   *
   * Regras de neg칩cio:
   * - Apenas Gerente e Administrador podem criar
   * - Nome deve ser 칰nico na unidade
   * - Pre칞o e comiss칚o devem ser v치lidos
   *
   * @param {Object} data - Dados do servi칞o
   * @param {Object} user - Usu치rio autenticado
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async createService(data, user) {
    try {
      console.log('游댏 serviceService.createService - user recebido:', user);
      console.log('游댏 user.role:', user?.role);
      console.log('游댏 ALLOWED_ROLES:', ALLOWED_ROLES);

      // Valida칞칚o de permiss칚o
      if (!this._hasPermission(user)) {
        const error = new Error(
          'Apenas Gerente e Administrador podem criar servi칞os'
        );
        toast.error(error.message);
        return { data: null, error };
      }

      // Valida칞칚o do DTO
      const validation = validateCreateService(data);

      if (!validation.success) {
        const error = new Error(validation.error);
        toast.error(`Dados inv치lidos: ${validation.error}`);
        return { data: null, error };
      }

      // Valida칞칚o de neg칩cio adicional
      if (validation.data.price <= 0) {
        const error = new Error('O pre칞o do servi칞o deve ser maior que zero');
        toast.error(error.message);
        return { data: null, error };
      }

      if (
        validation.data.commissionPercentage < 0 ||
        validation.data.commissionPercentage > 100
      ) {
        const error = new Error('A comiss칚o deve estar entre 0% e 100%');
        toast.error(error.message);
        return { data: null, error };
      }

      // Cria o servi칞o
      const result = await serviceRepository.createService(validation.data);

      if (result.error) {
        toast.error('Erro ao criar servi칞o');
        return result;
      }

      toast.success(`Servi칞o "${validation.data.name}" criado com sucesso!`);

      // Log de auditoria
      console.info('[ServiceService] Servi칞o criado:', {
        serviceId: result.data.id,
        userId: user.id,
        name: validation.data.name,
        price: validation.data.price,
        commission: validation.data.commissionPercentage,
      });

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao criar servi칞o');
      return { data: null, error };
    }
  }

  /**
   * Atualiza um servi칞o existente
   *
   * @param {string} id - ID do servi칞o
   * @param {Object} data - Dados a serem atualizados
   * @param {Object} user - Usu치rio autenticado
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async updateService(id, data, user) {
    try {
      // Valida칞칚o de permiss칚o
      if (!this._hasPermission(user)) {
        const error = new Error(
          'Apenas Gerente e Administrador podem editar servi칞os'
        );
        toast.error(error.message);
        return { data: null, error };
      }

      // Valida칞칚o do DTO
      const validation = validateUpdateService(data);

      if (!validation.success) {
        const error = new Error(validation.error);
        toast.error(`Dados inv치lidos: ${validation.error}`);
        return { data: null, error };
      }

      // Valida칞칫es de neg칩cio adicionais
      if (validation.data.price !== undefined && validation.data.price <= 0) {
        const error = new Error('O pre칞o do servi칞o deve ser maior que zero');
        toast.error(error.message);
        return { data: null, error };
      }

      if (
        validation.data.commissionPercentage !== undefined &&
        (validation.data.commissionPercentage < 0 ||
          validation.data.commissionPercentage > 100)
      ) {
        const error = new Error('A comiss칚o deve estar entre 0% e 100%');
        toast.error(error.message);
        return { data: null, error };
      }

      // Atualiza o servi칞o
      const result = await serviceRepository.updateService(id, validation.data);

      if (result.error) {
        toast.error('Erro ao atualizar servi칞o');
        return result;
      }

      toast.success('Servi칞o atualizado com sucesso!');

      // Log de auditoria
      console.info('[ServiceService] Servi칞o atualizado:', {
        serviceId: id,
        userId: user.id,
        changes: validation.data,
      });

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao atualizar servi칞o');
      return { data: null, error };
    }
  }

  /**
   * Desativa um servi칞o (soft delete)
   *
   * @param {string} id - ID do servi칞o
   * @param {Object} user - Usu치rio autenticado
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async deleteService(id, user) {
    try {
      // Valida칞칚o de permiss칚o
      if (!this._hasPermission(user)) {
        const error = new Error(
          'Apenas Gerente e Administrador podem desativar servi칞os'
        );
        toast.error(error.message);
        return { data: null, error };
      }

      // Verifica se o servi칞o est치 sendo usado
      const { data: inUse, error: checkError } =
        await serviceRepository.isServiceInUse(id);

      if (checkError) {
        toast.error('Erro ao verificar uso do servi칞o');
        return { data: null, error: checkError };
      }

      // Desativa o servi칞o
      const result = await serviceRepository.deleteService(id);

      if (result.error) {
        toast.error('Erro ao desativar servi칞o');
        return result;
      }

      if (inUse) {
        toast.success(
          'Servi칞o desativado! Ele continuar치 aparecendo em comandas antigas.'
        );
      } else {
        toast.success('Servi칞o desativado com sucesso!');
      }

      // Log de auditoria
      console.info('[ServiceService] Servi칞o desativado:', {
        serviceId: id,
        userId: user.id,
        wasInUse: inUse,
      });

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao desativar servi칞o');
      return { data: null, error };
    }
  }

  /**
   * Busca um servi칞o por ID
   *
   * @param {string} id - ID do servi칞o
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async getServiceById(id) {
    try {
      const result = await serviceRepository.getServiceById(id);

      if (result.error) {
        toast.error('Erro ao buscar servi칞o');
      }

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao buscar servi칞o');
      return { data: null, error };
    }
  }

  /**
   * Lista servi칞os ativos para sele칞칚o em comandas
   *
   * @param {string} unitId - ID da unidade
   * @returns {Promise<{data: Array|null, error: Error|null}>}
   */
  async listActiveServices(unitId) {
    try {
      const result = await serviceRepository.getActiveServices(unitId);

      if (result.error) {
        toast.error('Erro ao buscar servi칞os ativos');
      }

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao buscar servi칞os');
      return { data: null, error };
    }
  }

  /**
   * Lista servi칞os com filtros
   *
   * @param {string} unitId - ID da unidade
   * @param {Object} filters - Filtros de busca
   * @returns {Promise<{data: Array|null, error: Error|null, count: number|null}>}
   */
  async listServices(unitId, filters = {}) {
    try {
      const result = await serviceRepository.listServices(unitId, filters);

      if (result.error) {
        toast.error('Erro ao listar servi칞os');
      }

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao listar servi칞os');
      return { data: null, error, count: null };
    }
  }

  /**
   * Calcula a comiss칚o de um servi칞o
   *
   * @param {string} serviceId - ID do servi칞o
   * @param {number} quantity - Quantidade
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async calculateServiceCommission(serviceId, quantity = 1) {
    try {
      // Busca dados do servi칞o
      const { data: service, error } =
        await serviceRepository.getServiceById(serviceId);

      if (error) {
        toast.error('Erro ao buscar dados do servi칞o');
        return { data: null, error };
      }

      // Calcula comiss칚o
      const commissionValue = calculateCommission(
        service.price,
        service.commission_percentage,
        quantity
      );

      const totalValue = service.price * quantity;

      return {
        data: {
          serviceId,
          serviceName: service.name,
          unitPrice: service.price,
          quantity,
          commissionPercentage: service.commission_percentage,
          commissionValue,
          totalValue,
        },
        error: null,
      };
    } catch (error) {
      toast.error('Erro ao calcular comiss칚o');
      return { data: null, error };
    }
  }

  /**
   * Reativa um servi칞o desativado
   *
   * @param {string} id - ID do servi칞o
   * @param {Object} user - Usu치rio autenticado
   * @returns {Promise<{data: Object|null, error: Error|null}>}
   */
  async reactivateService(id, user) {
    try {
      // Valida칞칚o de permiss칚o
      if (!this._hasPermission(user)) {
        const error = new Error(
          'Apenas Gerente e Administrador podem reativar servi칞os'
        );
        toast.error(error.message);
        return { data: null, error };
      }

      const result = await serviceRepository.reactivateService(id);

      if (result.error) {
        toast.error('Erro ao reativar servi칞o');
        return result;
      }

      toast.success('Servi칞o reativado com sucesso!');

      // Log de auditoria
      console.info('[ServiceService] Servi칞o reativado:', {
        serviceId: id,
        userId: user.id,
      });

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao reativar servi칞o');
      return { data: null, error };
    }
  }

  /**
   * Busca servi칞os populares
   *
   * @param {string} unitId - ID da unidade
   * @param {number} limit - Quantidade de servi칞os
   * @returns {Promise<{data: Array|null, error: Error|null}>}
   */
  async getPopularServices(unitId, limit = 10) {
    try {
      const result = await serviceRepository.getPopularServices(unitId, limit);

      if (result.error) {
        toast.error('Erro ao buscar servi칞os populares');
      }

      return result;
    } catch (error) {
      toast.error('Erro inesperado ao buscar servi칞os populares');
      return { data: null, error };
    }
  }
}

export default new ServiceService();

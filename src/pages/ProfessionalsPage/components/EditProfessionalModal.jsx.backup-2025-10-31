import React, { useState, useEffect } from 'react';
import { X, User, Mail, Percent, Edit, Settings, DollarSign } from 'lucide-react';
import { Button } from '../../../atoms/Button/Button';
import { Input } from '../../../atoms/Input/Input';
import { ProfissionaisService } from '../../../services/profissionaisService';
import { useToast } from '../../../context/ToastContext';
import CommissionsTable from '../../../molecules/CommissionsTable';
import { useProfessionalCommissions } from '../../../hooks/useProfessionalCommissions';

/**
 * Modal para editar profissional existente
 */
export function EditProfessionalModal({
  professional,
  onClose,
  onSuccess
}) {
  const {
    showToast
  } = useToast();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('basic'); // 'basic' ou 'commissions'

  // Estados do formul√°rio - inicializar com dados do profissional
  const [formData, setFormData] = useState({
    name: professional.name || '',
    // ‚úÖ FIX: Garantir que unit_id seja null se vazio ou inv√°lido
    unit_id: professional.unit_id && professional.unit_id.trim() !== '' ? professional.unit_id : null,
    role: professional.role || 'barbeiro',
    commission_rate: professional.commission_rate || 0,
    is_active: professional.is_active ?? true
  });
  const [errors, setErrors] = useState({});

  // Hook para comiss√µes do profissional
  const {
    commissions,
    loading: commissionsLoading,
    error: commissionsError,
    fetchCommissions,
    saveCommission
  } = useProfessionalCommissions(professional.id, professional.unit_id);

  // Carregar comiss√µes quando a aba for ativada
  useEffect(() => {
    if (activeTab === 'commissions' && professional.id && professional.unit_id) {
      fetchCommissions();
    }
  }, [activeTab, professional.id, professional.unit_id, fetchCommissions]);

  /**
   * Atualiza o estado do formul√°rio
   */
  const handleInputChange = (field, value) => {
    setFormData(prev => {
      const updated = {
        ...prev,
        [field]: value
      };

      // Se mudou para admin, limpar unit_id
      if (field === 'role' && value === 'admin') {
        updated.unit_id = null;
      }
      return updated;
    });

    // Limpar erro do campo se houver
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  };

  /**
   * Valida o formul√°rio
   */
  const validateForm = () => {
    const newErrors = {};

    // Nome obrigat√≥rio
    if (!formData.name.trim()) {
      newErrors.name = 'Nome √© obrigat√≥rio';
    }

    // Unidade obrigat√≥ria para barbeiros, gerentes e recepcionistas (n√£o para admin)
    if (formData.role !== 'admin') {
      const unitId = formData.unit_id?.trim();
      if (!unitId || unitId === '') {
        newErrors.unit_id = 'Unidade √© obrigat√≥ria para este cargo';
      }
    }

    // Comiss√£o deve ser v√°lida
    if (formData.commission_rate < 0 || formData.commission_rate > 100) {
      newErrors.commission_rate = 'Comiss√£o deve estar entre 0 e 100%';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  /**
   * Submete o formul√°rio
   */
  const handleSubmit = async e => {
    e.preventDefault();
    if (!validateForm()) return;
    try {
      setLoading(true);

      // Preparar dados para atualiza√ß√£o
      const updates = {
        name: formData.name.trim(),
        role: formData.role,
        commission_rate: formData.commission_rate,
        is_active: formData.is_active
      };

      // ‚úÖ CORRIGIDO: Garantir que unit_id seja null para admin ou UUID v√°lido (nunca string vazia)
      if (formData.role === 'admin') {
        updates.unit_id = null;
      } else {
        // Para gerente/barbeiro/recepcionista: garantir UUID v√°lido ou null
        const unitId = formData.unit_id?.trim();
        updates.unit_id = unitId && unitId !== '' ? unitId : null;
      }

      // üêõ DEBUG: Log detalhado antes de enviar
      console.log('üîç DEBUG - EditProfessionalModal.handleSubmit');
      console.log('üìã formData:', formData);
      console.log('üì§ updates a serem enviados:', updates);
      console.log('üîë professional.id:', professional.id);
      console.log('üíº formData.role:', formData.role);
      console.log('üè¢ formData.unit_id (RAW):', formData.unit_id);
      console.log('üè¢ updates.unit_id (FINAL):', updates.unit_id);
      console.log('üîç Tipo de updates.unit_id:', typeof updates.unit_id);
      await ProfissionaisService.updateProfissional(professional.id, updates);
      showToast({
        type: 'success',
        message: 'Profissional atualizado com sucesso!',
        description: `As informa√ß√µes de ${formData.name} foram atualizadas.`
      });
      onSuccess();
    } catch (error) {
      console.error('‚ùå Erro no handleSubmit:', error);
      showToast({
        type: 'error',
        message: 'Erro ao atualizar profissional',
        description: error.message
      });
    } finally {
      setLoading(false);
    }
  };
  return <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="card-theme rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-light-border dark:border-dark-border">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
              <Edit className="h-5 w-5 text-primary" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-text-light-primary dark:text-text-dark-primary">
                Editar Profissional
              </h2>
              <p className="text-sm text-text-light-secondary dark:text-text-dark-secondary">
                Atualizar informa√ß√µes de {professional.name}
              </p>
            </div>
          </div>
          <Button variant="ghost" size="sm" icon={X} onClick={onClose} />
        </div>

        {/* Tabs Navigation */}
        <div className="border-b border-light-border dark:border-dark-border">
          <nav className="flex space-x-8 px-6">
            {[{
            id: 'basic',
            label: 'Informa√ß√µes B√°sicas',
            icon: User
          }, {
            id: 'commissions',
            label: 'Comiss√µes por Servi√ßo',
            icon: DollarSign
          }].map(tab => {
            const TabIcon = tab.icon;
            return <button key={tab.id} onClick={() => setActiveTab(tab.id)} className={`flex items-center gap-2 py-4 px-2 text-sm font-medium border-b-2 transition-colors ${activeTab === tab.id ? 'border-primary text-primary' : 'border-transparent text-text-light-secondary dark:text-text-dark-secondary hover:text-text-light-primary dark:hover:text-text-dark-primary hover:border-light-border dark:hover:border-dark-border'}`}>
                  <TabIcon className="h-4 w-4" />
                  {tab.label}
                </button>;
          })}
          </nav>
        </div>

        {/* Tab Content */}
        <div className="p-6">
          {activeTab === 'basic' && <form onSubmit={handleSubmit} className="space-y-6">
              {/* Informa√ß√µes B√°sicas */}
              <div>
                <h3 className="text-lg font-medium text-text-light-primary dark:text-text-dark-primary mb-4">
                  Informa√ß√µes B√°sicas
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="md:col-span-2">
                    <Input label="Nome Completo *" icon={User} value={formData.name} onChange={e => handleInputChange('name', e.target.value)} error={errors.name} placeholder="Ex: Jo√£o Silva" />
                  </div>

                  {professional.user?.email && <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-text-light-secondary dark:text-text-dark-secondary mb-2">
                        Email (n√£o edit√°vel)
                      </label>
                      <div className="flex items-center gap-2 px-3 py-2 rounded-lg border border-light-border dark:border-dark-border bg-light-bg/50 dark:bg-dark-bg/50">
                        <Mail className="h-4 w-4 text-text-light-secondary dark:text-text-dark-secondary" />
                        <span className="text-text-light-secondary dark:text-text-dark-secondary">
                          {professional.user.email}
                        </span>
                      </div>
                    </div>}

                  <div>
                    <label className="block text-sm font-medium text-text-light-primary dark:text-text-dark-primary mb-2">
                      Cargo *
                    </label>
                    <select className="w-full px-3 py-2 rounded-lg border border-light-border dark:border-dark-border bg-light-bg dark:bg-dark-bg text-text-light-primary dark:text-text-dark-primary text-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary transition-colors duration-300" value={formData.role} onChange={e => handleInputChange('role', e.target.value)}>
                      <option value="barbeiro">Barbeiro</option>
                      <option value="gerente">Gerente</option>
                      <option value="admin">Administrador</option>
                    </select>
                    {errors.role && <p className="text-feedback-light-error dark:text-feedback-dark-error text-xs mt-1">
                        {errors.role}
                      </p>}
                  </div>

                  {formData.role !== 'admin' && <div>
                      <label className="block text-sm font-medium text-text-light-primary dark:text-text-dark-primary mb-2">
                        Unidade *
                      </label>
                      <select className="w-full px-3 py-2 rounded-lg border border-light-border dark:border-dark-border bg-light-bg dark:bg-dark-bg text-text-light-primary dark:text-text-dark-primary text-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary transition-colors duration-300" value={formData.unit_id || ''} onChange={e => handleInputChange('unit_id', e.target.value || null)}>
                        <option value="">Selecione uma unidade</option>
                        <option value="0db46613-5273-4625-a41d-b4a0dec7dfe7">
                          Mangabeiras
                        </option>
                        <option value="f18050b4-0954-41c1-a1ee-d17617b95bad">
                          Nova Lima
                        </option>
                      </select>
                      {errors.unit_id && <p className="text-feedback-light-error dark:text-feedback-dark-error text-xs mt-1">
                          {errors.unit_id}
                        </p>}
                    </div>}
                </div>
              </div>

              {/* Configura√ß√µes do Trabalho */}
              <div>
                <h3 className="text-lg font-medium text-text-light-primary dark:text-text-dark-primary mb-4">
                  Configura√ß√µes do Trabalho
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Input label="Comiss√£o (%)" type="number" icon={Percent} min="0" max="100" step="0.01" value={formData.commission_rate} onChange={e => handleInputChange('commission_rate', parseFloat(e.target.value) || 0)} error={errors.commission_rate} placeholder="0.00" />

                  <div className="flex items-center gap-2 mt-8">
                    <input type="checkbox" id="is_active" checked={formData.is_active} onChange={e => handleInputChange('is_active', e.target.checked)} className="rounded border-light-border dark:border-dark-border" />
                    <label htmlFor="is_active" className="text-sm text-text-light-primary dark:text-text-dark-primary cursor-pointer">
                      Profissional ativo
                    </label>
                  </div>
                </div>
              </div>

              {/* A√ß√µes */}
              <div className="flex gap-3 pt-4">
                <Button type="button" variant="outline" onClick={onClose} className="flex-1" disabled={loading}>
                  Cancelar
                </Button>
                <Button type="submit" variant="primary" loading={loading} className="flex-1">
                  Salvar Altera√ß√µes
                </Button>
              </div>
            </form>}

          {activeTab === 'commissions' && <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-text-light-primary dark:text-text-dark-primary mb-4">
                  Comiss√µes por Servi√ßo
                </h3>
                <p className="text-sm text-text-light-secondary dark:text-text-dark-secondary mb-6">
                  Configure a porcentagem de comiss√£o que {professional.name}{' '}
                  recebe por cada servi√ßo realizado.
                </p>
                {/* Se n√£o h√° unidade associada, instruir usu√°rio a preencher na aba "Informa√ß√µes B√°sicas" */}
                {!professional.unit_id && <div className="mb-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                    <p className="text-sm text-yellow-800 dark:text-yellow-200">
                      Este profissional n√£o possui uma unidade associada. Para
                      configurar comiss√µes por servi√ßo, primeiro selecione a
                      unidade na aba "Informa√ß√µes B√°sicas".
                    </p>
                  </div>}

                {commissionsError && <div className="mb-4 p-4 bg-feedback-light-error/10 dark:bg-feedback-dark-error/10 border border-feedback-light-error/20 dark:border-feedback-dark-error/20 rounded-lg">
                    <p className="text-feedback-light-error dark:text-feedback-dark-error text-sm">
                      Erro ao carregar comiss√µes: {commissionsError}
                    </p>
                  </div>}

                {commissionsLoading ? <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    <span className="ml-3 text-text-light-secondary dark:text-text-dark-secondary">
                      Carregando comiss√µes...
                    </span>
                  </div> : commissions.length > 0 ? <CommissionsTable commissions={commissions} onSave={saveCommission} loading={commissionsLoading} /> : <div className="text-center py-8">
                    <DollarSign className="h-12 w-12 text-text-light-secondary dark:text-text-dark-secondary mx-auto mb-4" />
                    <p className="text-text-light-secondary dark:text-text-dark-secondary">
                      Nenhum servi√ßo encontrado para esta unidade.
                    </p>
                  </div>}
              </div>

              {/* A√ß√µes da aba de comiss√µes */}
              <div className="flex gap-3 pt-4">
                <Button type="button" variant="outline" onClick={onClose} className="flex-1">
                  Fechar
                </Button>
              </div>
            </div>}
        </div>
      </div>
    </div>;
}
import React, { useState, useEffect, useCallback } from 'react';

// Custom Hooks
import { useReconciliationMatches } from '../../hooks/useReconciliationMatches';
import { useBankStatements } from '../../hooks/useBankStatements';
import useBankAccounts from '../../hooks/useBankAccounts';

// Components
import ConciliacaoPanel from '../../organisms/ConciliacaoPanel/ConciliacaoPanel';
import ImportStatementModal from '../../templates/ImportStatementModal';
import ManualReconciliationModal from '../../templates/ManualReconciliationModal';
import ImportExpensesFromOFXModal from '../../templates/ImportExpensesFromOFXModal';

/**
 * Tab de Concilia√ß√£o Banc√°ria
 *
 * Features:
 * - ConciliacaoPanel para gerenciar matches autom√°ticos
 * - ImportStatementModal para importa√ß√£o de extratos
 * - ManualReconciliationModal para vincula√ß√µes manuais
 * - Integration com hooks de reconcilia√ß√£o e extratos
 */
const ConciliacaoTab = ({
  globalFilters
}) => {
  // Estado local
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);
  const [isManualModalOpen, setIsManualModalOpen] = useState(false);
  const [isImportExpensesOFXModalOpen, setIsImportExpensesOFXModalOpen] = useState(false);

  // Hooks para dados
  const {
    matches,
    loading: matchesLoading,
    error: matchesError,
    refetch: refetchMatches,
    runAutoMatch,
    confirmMatch,
    rejectMatch
  } = useReconciliationMatches(globalFilters.accountId);
  const {
    statements,
    unreconciled,
    loading: statementsLoading,
    error: statementsError,
    refetch: refetchStatements,
    importStatements
  } = useBankStatements(globalFilters.accountId, null, null);
  const {
    bankAccounts: availableAccounts,
    loading: bankAccountsLoading,
    updateFilters: updateBankAccountFilters
  } = useBankAccounts({
    unitId: globalFilters.unitId,
    incluirInativas: false
  });
  useEffect(() => {
    updateBankAccountFilters({
      unitId: globalFilters.unitId,
      incluirInativas: false
    });
  }, [globalFilters.unitId, updateBankAccountFilters]);

  // Handlers
  const handleImportSuccess = useCallback(() => {
    setIsImportModalOpen(false);
    refetchMatches();
  }, [refetchMatches]);
  const handleImportExpensesOFXSuccess = useCallback(report => {
    setIsImportExpensesOFXModalOpen(false);
    refetchMatches();
    refetchStatements();
    console.log('‚úÖ Importa√ß√£o OFX conclu√≠da:', report);
  }, [refetchMatches, refetchStatements]);
  const handleImport = useCallback(payload => importStatements(payload), [importStatements]);
  const handleManualReconciliationSuccess = () => {
    setIsManualModalOpen(false);
    refetchStatements();
    refetchMatches();
  };
  const handleRunAutoMatch = async () => {
    await runAutoMatch();
  };
  const handleConfirmMatch = async (matchId, adjustmentData) => {
    const result = await confirmMatch(matchId, adjustmentData);
    if (result.success) {
      refetchStatements();
    }
    return result;
  };
  const handleRejectMatch = async (matchId, reason) => {
    const result = await rejectMatch(matchId, reason);
    if (result.success) {
      refetchStatements();
    }
    return result;
  };
  return <div className="space-y-6">
      {/* Controles principais - Dark Mode */}
      <div className="card-theme dark:bg-dark-surface rounded-lg shadow-sm border border-light-border dark:border-dark-border p-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
          <div>
            <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
              Concilia√ß√£o Banc√°ria
            </h3>
            <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted mt-1">
              Gerencie a concilia√ß√£o entre extratos banc√°rios e lan√ßamentos
              financeiros
            </p>
          </div>

          <div className="flex items-center space-x-3">
            <button onClick={() => setIsImportModalOpen(true)} className="px-4 py-2 text-sm font-medium text-dark-text-primary bg-blue-600 dark:bg-blue-500 rounded-md hover:bg-blue-700 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
              Importar Extrato
            </button>
            <button onClick={() => setIsImportExpensesOFXModalOpen(true)} className="px-4 py-2 text-sm font-medium text-dark-text-primary bg-purple-600 dark:bg-purple-500 rounded-md hover:bg-purple-700 dark:hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-500">
              Importar Despesas (OFX)
            </button>
            <button onClick={() => setIsManualModalOpen(true)} className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 card-theme dark:bg-gray-700 border border-light-border dark:border-dark-border rounded-md hover:bg-light-bg dark:bg-dark-bg dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
              Vincular Manual
            </button>
            <button onClick={handleRunAutoMatch} disabled={matchesLoading || !globalFilters.accountId} className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 card-theme dark:bg-gray-700 border border-light-border dark:border-dark-border rounded-md hover:bg-light-bg dark:bg-dark-bg dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50">
              Executar Auto-Match
            </button>
          </div>
        </div>

        {/* Info da conta selecionada - Dark Mode */}
        {!globalFilters.accountId && <div className="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md">
            <p className="text-sm text-yellow-800 dark:text-yellow-300">
              Selecione uma conta banc√°ria nos filtros globais para utilizar a
              concilia√ß√£o.
            </p>
          </div>}
      </div>

      {/* Panel principal de concilia√ß√£o */}
      {globalFilters.accountId ? <ConciliacaoPanel
    // Props adaptadas para o painel
    reconciliationMatches={matches} bankTransactions={statements} internalTransactions={unreconciled} selectedAccount={availableAccounts.find(acc => acc.id === globalFilters.accountId) || {
      id: globalFilters.accountId,
      nome: 'Conta Selecionada'
    }}
    // Estados
    loading={matchesLoading || statementsLoading} error={matchesError || statementsError}
    // Callbacks
    onApproveMatch={handleConfirmMatch} onRejectMatch={handleRejectMatch} onRefreshData={() => {
      refetchMatches();
      refetchStatements();
    }} onRunAutoMatch={handleRunAutoMatch} onImportStatement={() => setIsImportModalOpen(true)} onCreateManualMatch={() => setIsManualModalOpen(true)} /> : <div className="card-theme dark:bg-dark-surface rounded-lg shadow-sm border border-light-border dark:border-dark-border p-12">
          <div className="text-center">
            <div className="text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary text-6xl mb-4">
              üè¶
            </div>
            <h3 className="text-lg font-medium text-theme-primary dark:text-dark-text-primary mb-2">
              Nenhuma conta selecionada
            </h3>
            <p className="text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted max-w-md mx-auto">
              Para utilizar a concilia√ß√£o banc√°ria, voc√™ precisa primeiro
              selecionar uma conta banc√°ria nos filtros globais da p√°gina.
            </p>
          </div>
        </div>}

      {/* Modal de importa√ß√£o */}
      <ImportStatementModal isOpen={isImportModalOpen} onClose={() => setIsImportModalOpen(false)} onImport={handleImport} onSuccess={handleImportSuccess} loading={statementsLoading || bankAccountsLoading} availableAccounts={availableAccounts} defaultAccountId={globalFilters.accountId} />

      {/* Modal de concilia√ß√£o manual */}
      <ManualReconciliationModal isOpen={isManualModalOpen} onClose={() => setIsManualModalOpen(false)} onSuccess={handleManualReconciliationSuccess} accountId={globalFilters.accountId} unreconciled={unreconciled} />

      {/* Modal de importa√ß√£o de despesas OFX */}
      <ImportExpensesFromOFXModal isOpen={isImportExpensesOFXModalOpen} onClose={() => setIsImportExpensesOFXModalOpen(false)} onSuccess={handleImportExpensesOFXSuccess} availableAccounts={availableAccounts} defaultAccountId={globalFilters.accountId} unitId={globalFilters.unitId} />

      {/* Status de loading overlay - Dark Mode */}
      {(matchesLoading || statementsLoading) && <div className="fixed inset-0 bg-black bg-opacity-25 dark:bg-black dark:bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="card-theme dark:bg-dark-surface rounded-lg p-6 shadow-xl border border-light-border dark:border-dark-border">
            <div className="flex items-center space-x-3">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 dark:border-blue-400"></div>
              <span className="text-theme-primary dark:text-dark-text-primary">
                Carregando dados de concilia√ß√£o...
              </span>
            </div>
          </div>
        </div>}
    </div>;
};
export default ConciliacaoTab;
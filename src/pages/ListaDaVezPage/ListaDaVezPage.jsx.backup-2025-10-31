import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, Button, UnitSelector } from '../../atoms';
import { useListaDaVez } from '../../hooks/useListaDaVez';
import { useToast } from '../../context/ToastContext';
import { FiRefreshCw, FiCalendar, FiDownload, FiUsers, FiTrendingUp, FiClock, FiAward } from 'react-icons/fi';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Doughnut } from 'react-chartjs-2';

// Registrar componentes do Chart.js
ChartJS.register(ArcElement, Tooltip, Legend);

/**
 * CORES PARA BARBEIROS
 * Paleta premium inspirada no design system
 */
const BARBER_COLORS = ['#3B82F6',
// Azul
'#EF4444',
// Vermelho
'#F59E0B',
// Amarelo/Laranja
'#10B981',
// Verde
'#8B5CF6',
// Roxo
'#EC4899',
// Rosa
'#06B6D4',
// Ciano
'#F97316' // Laranja escuro
];
const ListaDaVezPage = () => {
  const navigate = useNavigate();
  const {
    turnList,
    stats,
    loading,
    error,
    selectedUnit,
    addPoint,
    initializeTurnList,
    loadTurnList,
    refresh
  } = useListaDaVez();

  // Estados locais
  const [processingBarber, setProcessingBarber] = useState(null);

  // Calcular estatísticas
  const totalBarbers = turnList.length;
  const totalPoints = turnList.reduce((sum, b) => sum + b.points, 0);
  const averagePoints = totalBarbers > 0 ? (totalPoints / totalBarbers).toFixed(1) : 0;

  /**
   * Adicionar ponto a um barbeiro
   */
  const handleAddPoint = async barberId => {
    try {
      setProcessingBarber(barberId);
      await addPoint(barberId);
      showToast('Ponto adicionado com sucesso!', 'success');
    } catch (err) {
      showToast(`Erro: ${err.message}`, 'error');
    } finally {
      setProcessingBarber(null);
    }
  };

  /**
   * Inicializar lista da vez
   */
  const handleInitialize = async () => {
    if (!selectedUnit?.id) {
      showToast('Selecione uma unidade primeiro', 'warning');
      return;
    }
    try {
      await initializeTurnList(selectedUnit.id);
      showToast('Lista inicializada com sucesso!', 'success');
    } catch (err) {
      showToast(`Erro ao inicializar: ${err.message}`, 'error');
    }
  };

  /**
   * Atualizar dados
   */
  const handleRefresh = async () => {
    try {
      await refresh();
      showToast('Dados atualizados!', 'success');
    } catch (err) {
      showToast(`Erro ao atualizar: ${err.message}`, 'error');
    }
  };

  /**
   * Preparar dados para o gráfico
   */
  const getChartData = () => {
    if (totalPoints === 0) {
      return {
        labels: ['Sem dados'],
        datasets: [{
          data: [1],
          backgroundColor: ['#E5E7EB'],
          borderColor: ['#D1D5DB'],
          borderWidth: 2
        }]
      };
    }
    return {
      labels: turnList.map(b => b.professionalName),
      datasets: [{
        data: turnList.map(b => b.points),
        backgroundColor: turnList.map((_, idx) => BARBER_COLORS[idx % BARBER_COLORS.length]),
        borderColor: turnList.map((_, idx) => BARBER_COLORS[idx % BARBER_COLORS.length]),
        borderWidth: 2
      }]
    };
  };
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: true,
    plugins: {
      legend: {
        display: false
      },
      tooltip: {
        callbacks: {
          label: context => {
            const label = context.label || '';
            const value = context.parsed || 0;
            const percentage = totalPoints > 0 ? (value / totalPoints * 100).toFixed(1) : 0;
            return `${label}: ${value} atendimentos (${percentage}%)`;
          }
        }
      }
    }
  };
  return <div className="min-h-screen bg-light-bg dark:bg-dark-bg dark:bg-dark-surface p-6 space-y-6">
      {/* Cabeçalho */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-theme-primary dark:text-dark-text-primary">
            Lista da Vez
          </h1>
          <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted mt-1">
            Gerencie a ordem de atendimento dos barbeiros
          </p>
        </div>

        <div className="flex items-center gap-3">
          <Button onClick={handleRefresh} variant="secondary" disabled={loading} className="flex items-center gap-2">
            <FiRefreshCw className={loading ? 'animate-spin' : ''} />
            Atualizar
          </Button>

          <Button onClick={() => navigate('/queue/history')} variant="secondary" className="flex items-center gap-2">
            <FiCalendar />
            Ver Histórico
          </Button>

          <Button onClick={() => {
          /* TODO: Implementar exportação */
        }} variant="secondary" className="flex items-center gap-2">
            <FiDownload />
            Exportar
          </Button>
        </div>
      </div>

      {/* Seletor de Unidade */}
      <Card className="p-4">
        <div className="flex items-center gap-4">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
            Unidade:
          </label>
          <UnitSelector />
        </div>
      </Card>

      {/* Indicadores Superiores */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
              <FiUsers className="w-6 h-6 text-blue-600 dark:text-blue-400" />
            </div>
            <div>
              <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                Total de Barbeiros
              </p>
              <p className="text-2xl font-bold text-theme-primary dark:text-dark-text-primary">
                {totalBarbers}
              </p>
            </div>
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-green-100 dark:bg-green-900/20 rounded-lg">
              <FiTrendingUp className="w-6 h-6 text-green-600 dark:text-green-400" />
            </div>
            <div>
              <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                Total de Atendimentos
              </p>
              <p className="text-2xl font-bold text-theme-primary dark:text-dark-text-primary">
                {totalPoints}
              </p>
            </div>
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-purple-100 dark:bg-purple-900/20 rounded-lg">
              <FiAward className="w-6 h-6 text-purple-600 dark:text-purple-400" />
            </div>
            <div>
              <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                Média de Atendimentos
              </p>
              <p className="text-2xl font-bold text-theme-primary dark:text-dark-text-primary">
                {averagePoints}
              </p>
            </div>
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-orange-100 dark:bg-orange-900/20 rounded-lg">
              <FiClock className="w-6 h-6 text-orange-600 dark:text-orange-400" />
            </div>
            <div>
              <p className="text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                Última Atualização
              </p>
              <p className="text-sm font-medium text-theme-primary dark:text-dark-text-primary">
                {new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit'
              })}
              </p>
            </div>
          </div>
        </Card>
      </div>

      {/* Conteúdo Principal */}
      {!selectedUnit?.id ? <Card className="p-12 text-center">
          <FiUsers className="w-16 h-16 mx-auto text-light-text-muted dark:text-dark-text-muted mb-4" />
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary mb-2">
            Selecione uma Unidade
          </h3>
          <p className="text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
            Escolha uma unidade acima para visualizar a lista da vez
          </p>
        </Card> : turnList.length === 0 ? <Card className="p-12 text-center">
          <FiUsers className="w-16 h-16 mx-auto text-light-text-muted dark:text-dark-text-muted mb-4" />
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary mb-2">
            Nenhuma lista encontrada
          </h3>
          <p className="text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted mb-6">
            Inicialize a lista para esta unidade
          </p>
          <Button onClick={handleInitialize} disabled={loading}>
            {loading ? 'Inicializando...' : '+ Inicializar Lista'}
          </Button>
        </Card> : <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Lista de Barbeiros (2/3) */}
          <div className="lg:col-span-2">
            <Card className="p-6">
              <h2 className="text-xl font-bold text-theme-primary dark:text-dark-text-primary mb-4">
                Ordem de Atendimento
              </h2>

              <div className="space-y-2">
                {turnList.map((barber, index) => {
              const isFirst = index === 0;
              const percentage = totalPoints > 0 ? (barber.points / totalPoints * 100).toFixed(1) : '0.0';
              const color = BARBER_COLORS[index % BARBER_COLORS.length];
              const isProcessing = processingBarber === barber.professionalId;
              return <div key={barber.id} className={`
                        flex items-center gap-3 p-3 rounded-lg border-l-4 transition-all
                        ${isFirst ? 'bg-green-600 dark:bg-green-700 text-white border-green-800' : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700'}
                        ${isProcessing ? 'opacity-50' : ''}
                      `} style={{
                borderLeftColor: isFirst ? '#065F46' : color
              }}>
                      {/* Posição */}
                      <div className="flex-shrink-0 w-10 text-center">
                        <span className={`text-xl font-bold ${isFirst ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                          {barber.position}°
                        </span>
                      </div>

                      {/* Nome */}
                      <div className="flex-1 min-w-0">
                        <h3 className={`text-base font-semibold truncate ${isFirst ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                          {barber.professionalName}
                        </h3>
                        {isFirst && <span className="inline-flex items-center gap-1 text-xs font-medium text-green-100">
                            🔹 PRÓXIMO NA VEZ
                          </span>}
                      </div>

                      {/* Pontos */}
                      <div className="text-center px-3">
                        <p className={`text-xl font-bold ${isFirst ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                          {barber.points}
                        </p>
                        <p className={`text-xs ${isFirst ? 'text-green-100' : 'text-gray-500 dark:text-gray-400'}`}>
                          atendimentos
                        </p>
                      </div>

                      {/* Percentual */}
                      <div className="text-center px-3">
                        <p className={`text-base font-semibold ${isFirst ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                          {percentage}%
                        </p>
                        <p className={`text-xs ${isFirst ? 'text-green-100' : 'text-gray-500 dark:text-gray-400'}`}>
                          participação
                        </p>
                      </div>

                      {/* Botão +1 */}
                      <Button onClick={() => handleAddPoint(barber.professionalId)} disabled={loading || isProcessing} size="sm" className={`
                          flex-shrink-0
                          ${isFirst ? 'bg-green-800 text-white hover:bg-green-900 border-green-900 font-bold shadow-lg' : 'bg-blue-600 text-white hover:bg-blue-700 border-blue-600 font-semibold'}
                        `}>
                        {isProcessing ? '...' : '+1'}
                      </Button>
                    </div>;
            })}
              </div>
            </Card>
          </div>

          {/* Gráfico de Distribuição (1/3) */}
          <div className="lg:col-span-1">
            <Card className="p-6 h-full">
              <h2 className="text-xl font-bold text-theme-primary dark:text-dark-text-primary mb-4">
                Distribuição de Atendimentos
              </h2>

              <div className="flex items-center justify-center" style={{
            height: '300px'
          }}>
                <Doughnut data={getChartData()} options={chartOptions} />
              </div>

              {/* Legenda */}
              <div className="mt-6 space-y-2">
                {turnList.map((barber, index) => {
              const percentage = totalPoints > 0 ? (barber.points / totalPoints * 100).toFixed(1) : '0.0';
              const color = BARBER_COLORS[index % BARBER_COLORS.length];
              return <div key={barber.id} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full" style={{
                    backgroundColor: color
                  }} />
                        <span className="text-sm text-gray-700 dark:text-gray-300 truncate">
                          {barber.professionalName}
                        </span>
                      </div>
                      <span className="text-sm font-semibold text-theme-primary dark:text-dark-text-primary">
                        {percentage}%
                      </span>
                    </div>;
            })}
              </div>
            </Card>
          </div>
        </div>}

      {/* Mensagem de Erro */}
      {error && <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
          <p className="text-red-800 dark:text-red-200">⚠️ {error}</p>
        </Card>}
    </div>;
};
export default ListaDaVezPage;
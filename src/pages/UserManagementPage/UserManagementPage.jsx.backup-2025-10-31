import React, { useEffect, useState } from 'react';
import { supabase } from '../../services/supabase';
import auditService from '../../services/auditService';
import { Card } from '../../atoms';
import { User, DollarSign, X } from 'lucide-react';
import CommissionsTable from '../../molecules/CommissionsTable';
import { useProfessionalCommissions } from '../../hooks/useProfessionalCommissions';
const UserManagementPage = () => {
  const [users, setUsers] = useState([]);
  const [professionals, setProfessionals] = useState([]);
  const [units, setUnits] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Buscar dados iniciais
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        // Buscar usuários do auth.users
        const {
          data: authUsers,
          error: authError
        } = await supabase.auth.admin.listUsers();
        if (authError) throw authError;

        // Buscar profissionais
        const {
          data: profData,
          error: profError
        } = await supabase.from('professionals').select('*, units(name)').order('name');
        if (profError) throw profError;

        // Buscar unidades
        const {
          data: unitsData,
          error: unitsError
        } = await supabase.from('units').select('*').order('name');
        if (unitsError) throw unitsError;
        setUsers(authUsers?.users || []);
        setProfessionals(profData || []);
        setUnits(unitsData || []);

        // Log da visualização da página
        auditService.logPageView('user-management', {
          total_users: authUsers?.users?.length || 0
        });
      } catch (err) {
        setError(err.message);
        auditService.logError('user-management-fetch', err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // Função para criar/atualizar profissional
  const handleSaveProfessional = async formData => {
    try {
      setLoading(true);
      if (selectedUser) {
        // Atualizar
        const {
          error
        } = await supabase.from('professionals').update({
          name: formData.name,
          role: formData.role,
          unit_id: formData.unit_id,
          commission_rate: formData.commission_rate,
          is_active: formData.is_active
        }).eq('id', selectedUser.id);
        if (error) throw error;
        auditService.logUpdate('professionals', selectedUser.id, selectedUser, formData);
      } else {
        // Criar novo
        const {
          data,
          error
        } = await supabase.from('professionals').insert({
          user_id: formData.user_id,
          name: formData.name,
          role: formData.role,
          unit_id: formData.unit_id,
          commission_rate: formData.commission_rate || 0,
          is_active: true
        }).select().single();
        if (error) throw error;
        auditService.logCreate('professionals', data.id, formData);
      }

      // Recarregar dados
      window.location.reload();
    } catch (err) {
      setError(err.message);
      auditService.logError('save-professional', err);
    } finally {
      setLoading(false);
    }
  };

  // Função para excluir profissional
  const handleDeleteProfessional = async professionalId => {
    if (!window.confirm('Tem certeza que deseja excluir este profissional?')) {
      return;
    }
    try {
      setLoading(true);
      const professional = professionals.find(p => p.id === professionalId);
      const {
        error
      } = await supabase.from('professionals').delete().eq('id', professionalId);
      if (error) throw error;
      auditService.logDelete('professionals', professionalId, professional);

      // Remover da lista local
      setProfessionals(professionals.filter(p => p.id !== professionalId));
    } catch (err) {
      setError(err.message);
      auditService.logError('delete-professional', err);
    } finally {
      setLoading(false);
    }
  };

  // Função para ativar/desativar usuário
  const handleToggleUserStatus = async (userId, currentStatus) => {
    try {
      setLoading(true);

      // Atualizar no professionals
      const {
        error
      } = await supabase.from('professionals').update({
        is_active: !currentStatus
      }).eq('user_id', userId);
      if (error) throw error;
      auditService.logUpdate('professionals', userId, {
        is_active: currentStatus
      }, {
        is_active: !currentStatus
      });

      // Atualizar lista local
      setProfessionals(professionals.map(p => p.user_id === userId ? {
        ...p,
        is_active: !currentStatus
      } : p));
    } catch (err) {
      setError(err.message);
      auditService.logError('toggle-user-status', err);
    } finally {
      setLoading(false);
    }
  };
  if (loading) {
    return <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>;
  }
  return <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-theme-primary dark:text-dark-text-primary">
            Gerenciamento de Usuários
          </h1>
          <p className="text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
            Gerencie usuários, profissionais e permissões do sistema
          </p>
        </div>

        <button onClick={() => {
        setSelectedUser(null);
        setIsModalOpen(true);
      }} className="px-4 py-2 bg-blue-600 text-dark-text-primary rounded-lg hover:bg-blue-700 transition-colors">
          Novo Profissional
        </button>
      </div>

      {/* Mensagem de erro */}
      {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>}

      {/* Estatísticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4">
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
            Total de Usuários
          </h3>
          <p className="text-2xl font-bold text-blue-600">{users.length}</p>
        </Card>

        <Card className="p-4">
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
            Profissionais
          </h3>
          <p className="text-2xl font-bold text-green-600">
            {professionals.length}
          </p>
        </Card>

        <Card className="p-4">
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
            Ativos
          </h3>
          <p className="text-2xl font-bold text-green-600">
            {professionals.filter(p => p.is_active).length}
          </p>
        </Card>

        <Card className="p-4">
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
            Administradores
          </h3>
          <p className="text-2xl font-bold text-purple-600">
            {professionals.filter(p => p.role === 'admin').length}
          </p>
        </Card>
      </div>

      {/* Lista de Profissionais */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4 text-theme-primary dark:text-dark-text-primary">
          Lista de Profissionais
        </h2>

        <div className="overflow-x-auto">
          <table className="min-w-full table-auto">
            <thead>
              <tr className="border-b border-light-border dark:border-dark-border">
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Nome
                </th>
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Perfil
                </th>
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Unidade
                </th>
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Comissão
                </th>
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Status
                </th>
                <th className="px-4 py-2 text-left text-sm font-medium text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                  Ações
                </th>
              </tr>
            </thead>
            <tbody>
              {professionals.map(professional => <tr key={professional.id} className="border-b border-gray-100 dark:border-gray-800">
                  <td className="px-4 py-3 text-sm text-theme-primary dark:text-dark-text-primary">
                    {professional.name}
                  </td>
                  <td className="px-4 py-3 text-sm">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${professional.role === 'admin' ? 'bg-purple-100 text-purple-800' : professional.role === 'gerente' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>
                      {professional.role}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                    {professional.units?.name || '-'}
                  </td>
                  <td className="px-4 py-3 text-sm text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
                    {professional.commission_rate}%
                  </td>
                  <td className="px-4 py-3 text-sm">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${professional.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {professional.is_active ? 'Ativo' : 'Inativo'}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-sm space-x-2">
                    <button onClick={() => {
                  setSelectedUser(professional);
                  setIsModalOpen(true);
                }} className="text-blue-600 hover:text-blue-800 font-medium">
                      Editar
                    </button>

                    <button onClick={() => handleToggleUserStatus(professional.user_id, professional.is_active)} className={`font-medium ${professional.is_active ? 'text-red-600 hover:text-red-800' : 'text-green-600 hover:text-green-800'}`}>
                      {professional.is_active ? 'Desativar' : 'Ativar'}
                    </button>

                    <button onClick={() => handleDeleteProfessional(professional.id)} className="text-red-600 hover:text-red-800 font-medium">
                      Excluir
                    </button>
                  </td>
                </tr>)}
            </tbody>
          </table>

          {professionals.length === 0 && <div className="text-center py-8 text-theme-secondary dark:text-light-text-muted dark:text-dark-text-muted">
              Nenhum profissional encontrado
            </div>}
        </div>
      </Card>

      {/* Modal de Edição/Criação */}
      {isModalOpen && <UserModal user={selectedUser} units={units} users={users} professionals={professionals} onSave={handleSaveProfessional} onClose={() => {
      setIsModalOpen(false);
      setSelectedUser(null);
    }} />}
    </div>;
};

// Componente Modal para criar/editar usuários
const UserModal = ({
  user,
  units,
  users,
  professionals,
  onSave,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState('basic'); // 'basic' ou 'commissions'
  const [formData, setFormData] = useState({
    user_id: user?.user_id || '',
    name: user?.name || '',
    role: user?.role || 'barbeiro',
    unit_id: user?.unit_id || '',
    commission_rate: user?.commission_rate || 0,
    is_active: user?.is_active !== undefined ? user.is_active : true
  });

  // Hook para comissões do profissional (apenas para edição)
  const {
    commissions,
    loading: commissionsLoading,
    error: commissionsError,
    fetchCommissions,
    saveCommission
  } = useProfessionalCommissions(user?.id, user?.unit_id);

  // Carregar comissões quando a aba for ativada
  React.useEffect(() => {
    if (activeTab === 'commissions' && user?.id && user?.unit_id) {
      fetchCommissions();
    }
  }, [activeTab, user?.id, user?.unit_id, fetchCommissions]);
  const handleSubmit = e => {
    e.preventDefault();
    onSave(formData);
    onClose();
  };

  // Filtrar usuários que já não são profissionais
  const availableUsers = users.filter(u => !professionals.some(p => p.user_id === u.id) || u.id === user?.user_id);
  return <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="card-theme dark:bg-dark-surface rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-lg font-semibold text-theme-primary dark:text-dark-text-primary">
            {user ? 'Editar Profissional' : 'Novo Profissional'}
          </h3>
          <button onClick={onClose} className="text-light-text-muted dark:text-dark-text-muted hover:text-theme-secondary transition-colors">
            <X size={24} />
          </button>
        </div>

        {/* Navegação por abas - apenas para edição */}
        {user && <div className="flex border-b border-light-border dark:border-dark-border mb-6">
            <button type="button" onClick={() => setActiveTab('basic')} className={`flex items-center px-4 py-2 text-sm font-medium border-b-2 transition-colors ${activeTab === 'basic' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700'}`}>
              <User size={16} className="mr-2" />
              Informações Básicas
            </button>
            <button type="button" onClick={() => setActiveTab('commissions')} className={`flex items-center px-4 py-2 text-sm font-medium border-b-2 transition-colors ${activeTab === 'commissions' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700'}`}>
              <DollarSign size={16} className="mr-2" />
              Comissões por Serviço
            </button>
          </div>}

        {/* Conteúdo das abas */}
        {activeTab === 'basic' && <form onSubmit={handleSubmit} className="space-y-4">
          {/* Seleção de usuário (apenas para novo) */}
          {!user && <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Usuário
              </label>
              <select value={formData.user_id} onChange={e => setFormData({
            ...formData,
            user_id: e.target.value
          })} className="w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                <option value="">Selecione um usuário</option>
                {availableUsers.map(u => <option key={u.id} value={u.id}>
                    {u.email}
                  </option>)}
              </select>
            </div>}

          {/* Nome */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Nome
            </label>
            <input type="text" value={formData.name} onChange={e => setFormData({
            ...formData,
            name: e.target.value
          })} className="w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required />
          </div>

          {/* Perfil/Role */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Perfil
            </label>
            <select value={formData.role} onChange={e => setFormData({
            ...formData,
            role: e.target.value
          })} className="w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="barbeiro">Barbeiro</option>
              <option value="gerente">Gerente</option>
              <option value="admin">Administrador</option>
            </select>
          </div>

          {/* Unidade */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Unidade
            </label>
            <select value={formData.unit_id} onChange={e => setFormData({
            ...formData,
            unit_id: e.target.value
          })} className="w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="">Selecione uma unidade</option>
              {units.map(unit => <option key={unit.id} value={unit.id}>
                  {unit.name}
                </option>)}
            </select>
          </div>

          {/* Comissão */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Taxa de Comissão (%)
            </label>
            <input type="number" min="0" max="100" step="0.01" value={formData.commission_rate} onChange={e => setFormData({
            ...formData,
            commission_rate: parseFloat(e.target.value) || 0
          })} className="w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
          </div>

          {/* Status (apenas para edição) */}
          {user && <div>
              <label className="flex items-center space-x-2">
                <input type="checkbox" checked={formData.is_active} onChange={e => setFormData({
              ...formData,
              is_active: e.target.checked
            })} className="rounded border-light-border dark:border-dark-border text-blue-600 focus:ring-blue-500" />
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Usuário Ativo
                </span>
              </label>
            </div>}

            {/* Botões */}
            <div className="flex space-x-3 pt-4">
              <button type="submit" className="flex-1 px-4 py-2 bg-blue-600 text-dark-text-primary rounded-md hover:bg-blue-700 transition-colors">
                {user ? 'Atualizar' : 'Criar'}
              </button>
              <button type="button" onClick={onClose} className="flex-1 px-4 py-2 bg-gray-500 text-dark-text-primary rounded-md hover:bg-gray-600 transition-colors">
                Cancelar
              </button>
            </div>
          </form>}

        {/* Aba de Comissões */}
        {activeTab === 'commissions' && user && <div className="space-y-4">
            {commissionsLoading ? <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div> : commissionsError ? <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                {commissionsError}
              </div> : <CommissionsTable commissions={commissions} onSaveCommission={saveCommission} professionalId={user.id} unitId={user.unit_id} />}
          </div>}
      </div>
    </div>;
};
export default UserManagementPage;
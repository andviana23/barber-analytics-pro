import React, { useState } from 'react';
import { Mail, Lock, Eye, EyeOff, LogIn, Loader2, Sparkles } from 'lucide-react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { logger } from '../../utils/secureLogger';
export function LoginPage() {
  const navigate = useNavigate();
  const {
    signIn
  } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const handleInputChange = e => {
    const {
      name,
      value
    } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Limpar erro quando usu√°rio come√ßar a digitar
    if (error) setError('');
  };
  const validateForm = () => {
    if (!formData.email) {
      setError('Email √© obrigat√≥rio');
      return false;
    }
    if (!formData.email.includes('@')) {
      setError('Email deve ter um formato v√°lido');
      return false;
    }
    if (!formData.password) {
      setError('Senha √© obrigat√≥ria');
      return false;
    }
    if (formData.password.length < 6) {
      setError('Senha deve ter pelo menos 6 caracteres');
      return false;
    }
    return true;
  };
  const handleSubmit = async e => {
    e.preventDefault();
    if (!validateForm()) return;
    setIsLoading(true);
    setError('');
    try {
      // üõ°Ô∏è CORRE√á√ÉO BUG-002: Log sanitizado de autentica√ß√£o
      logger.auth('Tentativa de login', {
        email: formData.email
      });
      const {
        data,
        error: authError
      } = await signIn(formData.email, formData.password);
      logger.auth('Resultado do login', {
        success: !authError,
        hasData: !!data
      });
      if (authError) {
        logger.error('Erro de autentica√ß√£o', authError);

        // Mensagens de erro mais espec√≠ficas
        let errorMessage = 'Email ou senha incorretos';
        if (authError.message?.includes('Invalid login credentials')) {
          errorMessage = 'Email ou senha incorretos';
        } else if (authError.message?.includes('Email not confirmed')) {
          errorMessage = 'Email n√£o confirmado. Verifique sua caixa de entrada.';
        } else if (authError.message?.includes('Too many requests')) {
          errorMessage = 'Muitas tentativas. Tente novamente em alguns minutos.';
        } else if (authError.message) {
          errorMessage = authError.message;
        }
        setError(errorMessage);
        return;
      }
      if (data?.user) {
        logger.success('Login realizado com sucesso');
        // Sucesso - redirecionar para dashboard
        navigate('/dashboard');
      } else {
        setError('Erro inesperado no login. Tente novamente.');
      }
    } catch (err) {
      logger.error('Erro cr√≠tico no login', err);
      setError('Erro de conex√£o. Verifique sua internet e tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };
  return <div className="h-screen flex items-center justify-center bg-gradient-to-br from-light-bg via-light-surface to-light-bg dark:from-dark-bg dark:via-dark-surface dark:to-dark-bg px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-primary/5 rounded-full blur-3xl animate-pulse" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-primary/5 rounded-full blur-3xl animate-pulse delay-1000" />
      </div>

      {/* Login Container */}
      <div className="w-full max-w-md space-y-4 relative z-10">
        {/* Header with Logo */}
        <div className="text-center animate-fade-in-down">
          {/* Logo */}
          <div className="flex justify-center mb-4">
            <img src="/logo.svg" alt="Barber Analytics Pro" className="h-32 sm:h-36 w-auto object-contain" onError={e => {
            e.target.style.display = 'none';
            e.target.nextElementSibling.style.display = 'flex';
          }} />
            {/* Fallback Logo */}
            <div className="hidden items-center justify-center">
              <Sparkles className="w-28 h-28 text-primary" />
            </div>
          </div>

          {/* Title & Subtitle */}
          <h1 className="text-xl sm:text-2xl font-bold text-theme-primary mb-1.5 tracking-tight">
            Bem-vindo de volta
          </h1>
          <p className="text-theme-secondary text-xs">
            Fa√ßa login para acessar sua conta
          </p>
        </div>

        {/* Login Form Card */}
        <div className="card-theme rounded-2xl shadow-2xl border animate-fade-in-up">
          <div className="p-5 sm:p-6 space-y-4">
            <form className="space-y-3.5" onSubmit={handleSubmit}>
              {/* Email Field */}
              <div className="space-y-1.5">
                <label htmlFor="email" className="block text-xs font-semibold text-theme-primary">
                  Email
                </label>
                <div className="relative group">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-4 w-4 text-theme-secondary group-focus-within:text-primary transition-colors duration-200" />
                  </div>
                  <input id="email" name="email" type="email" autoComplete="email" required value={formData.email} onChange={handleInputChange} className="input-theme pl-10 h-10 text-sm transition-all duration-200" placeholder="seu@email.com" data-testid="email" />
                </div>
              </div>

              {/* Password Field */}
              <div className="space-y-1.5">
                <label htmlFor="password" className="block text-xs font-semibold text-theme-primary">
                  Senha
                </label>
                <div className="relative group">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Lock className="h-4 w-4 text-theme-secondary group-focus-within:text-primary transition-colors duration-200" />
                  </div>
                  <input id="password" name="password" type={showPassword ? 'text' : 'password'} autoComplete="current-password" required value={formData.password} onChange={handleInputChange} className="input-theme pl-10 pr-10 h-10 text-sm transition-all duration-200" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" data-testid="password" />
                  <button type="button" className="absolute inset-y-0 right-0 pr-3 flex items-center hover:scale-110 transition-transform duration-200" onClick={() => setShowPassword(!showPassword)} aria-label={showPassword ? 'Ocultar senha' : 'Mostrar senha'}>
                    {showPassword ? <EyeOff className="h-4 w-4 text-theme-secondary hover:text-theme-primary transition-colors duration-200" /> : <Eye className="h-4 w-4 text-theme-secondary hover:text-theme-primary transition-colors duration-200" />}
                  </button>
                </div>
              </div>

              {/* Error Message */}
              {error && <div className="bg-feedback-light-error/10 dark:bg-feedback-dark-error/10 border border-feedback-light-error/30 dark:border-feedback-dark-error/30 rounded-lg p-2.5 animate-shake">
                  <div className="flex items-start gap-2">
                    <div className="flex-shrink-0 mt-0.5">
                      <svg className="w-4 h-4 text-feedback-light-error dark:text-feedback-dark-error" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <p className="text-xs font-medium text-feedback-light-error dark:text-feedback-dark-error">
                      {error}
                    </p>
                  </div>
                </div>}

              {/* Forgot Password Link */}
              <div className="flex items-center justify-end">
                <Link to="/forgot-password" className="text-xs font-medium text-primary hover:text-primary-hover transition-colors duration-200 hover:underline">
                  Esqueceu sua senha?
                </Link>
              </div>

              {/* Submit Button */}
              <button type="submit" disabled={isLoading} className="btn-theme-primary w-full h-10 rounded-lg font-semibold text-sm shadow-lg shadow-primary/20 hover:shadow-xl hover:shadow-primary/30 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98]" data-testid="submit-login">
                {isLoading ? <span className="flex items-center justify-center gap-2">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    <span>Entrando...</span>
                  </span> : <span className="flex items-center justify-center gap-2">
                    <LogIn className="h-4 w-4" />
                    <span>Entrar</span>
                  </span>}
              </button>
            </form>

            {/* Divider */}
            <div className="relative py-2">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-light-border dark:border-dark-border" />
              </div>
              <div className="relative flex justify-center text-xs">
                <span className="px-2 card-theme text-theme-secondary font-medium">
                  OU
                </span>
              </div>
            </div>

            {/* Sign Up Link */}
            <div className="text-center">
              <p className="text-xs text-theme-secondary">
                N√£o tem uma conta?{' '}
                <Link to="/signup" className="font-semibold text-primary hover:text-primary-hover transition-colors duration-200 hover:underline">
                  Criar conta
                </Link>
              </p>
            </div>
          </div>
        </div>

        {/* Footer Info */}
        <div className="text-center text-[10px] text-theme-secondary/70 animate-fade-in">
          <p>¬© 2025 Barber Analytics Pro</p>
        </div>
      </div>

      {/* Custom Animations */}
      <style jsx>{`
        @keyframes fade-in-down {
          from {
            opacity: 0;
            transform: translateY(-20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes fade-in-up {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes fade-in {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }

        @keyframes shake {
          0%,
          100% {
            transform: translateX(0);
          }
          10%,
          30%,
          50%,
          70%,
          90% {
            transform: translateX(-5px);
          }
          20%,
          40%,
          60%,
          80% {
            transform: translateX(5px);
          }
        }

        .animate-fade-in-down {
          animation: fade-in-down 0.6s ease-out;
        }

        .animate-fade-in-up {
          animation: fade-in-up 0.6s ease-out 0.2s both;
        }

        .animate-fade-in {
          animation: fade-in 0.8s ease-out 0.4s both;
        }

        .animate-shake {
          animation: shake 0.5s ease-in-out;
        }

        .delay-1000 {
          animation-delay: 1s;
        }
      `}</style>
    </div>;
}
/**
 * üé® Modal: Criar Fornecedor - 100% REFATORADO COM DESIGN SYSTEM
 *
 * Formul√°rio premium para cadastro de novo fornecedor
 *
 * Features:
 * - ‚úÖ Design System completo aplicado
 * - ‚úÖ Layout em 2 colunas responsivo
 * - ‚úÖ Valida√ß√£o em tempo real
 * - ‚úÖ M√°scaras autom√°ticas (CPF/CNPJ)
 * - ‚úÖ Feedback visual de erros
 * - ‚úÖ Loading states elegantes
 * - ‚úÖ Dark mode completo
 * - ‚úÖ Anima√ß√µes suaves
 * - ‚úÖ Acessibilidade (ARIA, foco)
 *
 * Campos:
 * - Descri√ß√£o* (nome de exibi√ß√£o)
 * - CNPJ* (CPF ou CNPJ com m√°scara)
 * - Raz√£o Social (para CNPJ)
 * - Email (com valida√ß√£o)
 * - Telefone (com m√°scara)
 * - Endere√ßo
 * - Observa√ß√µes (textarea)
 */

import React, { useState } from 'react';
import { X, Package, Save, Building2, Mail, Phone, MapPin, FileText } from 'lucide-react';
import { useToast } from '../../context/ToastContext';
const CreateSupplierModalRefactored = ({
  isOpen,
  onClose,
  onSave,
  unitId
}) => {
  const {
    showToast
  } = useToast();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome: '',
    cpf_cnpj: '',
    razao_social: '',
    email: '',
    telefone: '',
    endereco: '',
    observacoes: ''
  });
  const [errors, setErrors] = useState({});
  if (!isOpen) return null;

  // Valida√ß√µes
  const validateCNPJ = value => {
    const cleaned = value.replace(/\D/g, '');
    return cleaned.length === 11 || cleaned.length === 14;
  };
  const validateEmail = email => {
    if (!email) return true; // Email √© opcional
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };
  const validateForm = () => {
    const newErrors = {};
    if (!formData.nome.trim()) {
      newErrors.nome = 'Nome √© obrigat√≥rio';
    }
    if (!formData.cpf_cnpj.trim()) {
      newErrors.cpf_cnpj = 'CPF/CNPJ √© obrigat√≥rio';
    } else if (!validateCNPJ(formData.cpf_cnpj)) {
      newErrors.cpf_cnpj = 'CPF/CNPJ inv√°lido';
    }
    if (formData.email && !validateEmail(formData.email)) {
      newErrors.email = 'Email inv√°lido';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    // Limpar erro do campo ao digitar
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  };
  const formatCNPJ = value => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.length <= 11) {
      // CPF: 000.000.000-00
      return cleaned.replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d{1,2})/, '$1-$2').replace(/(-\d{2})\d+?$/, '$1');
    }
    // CNPJ: 00.000.000/0000-00
    return cleaned.replace(/(\d{2})(\d)/, '$1.$2').replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d)/, '$1/$2').replace(/(\d{4})(\d)/, '$1-$2').replace(/(-\d{2})\d+?$/, '$1');
  };
  const formatPhone = value => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.length <= 10) {
      // (00) 0000-0000
      return cleaned.replace(/(\d{2})(\d)/, '($1) $2').replace(/(\d{4})(\d)/, '$1-$2');
    }
    // (00) 00000-0000
    return cleaned.replace(/(\d{2})(\d)/, '($1) $2').replace(/(\d{5})(\d)/, '$1-$2').replace(/(-\d{4})\d+?$/, '$1');
  };
  const handleSubmit = async e => {
    e.preventDefault();
    if (!validateForm()) {
      showToast({
        type: 'error',
        message: 'Erro de valida√ß√£o',
        description: 'Verifique os campos e tente novamente'
      });
      return;
    }
    setLoading(true);
    try {
      // Limpar formata√ß√£o do CNPJ e telefone antes de enviar
      const cleanedData = {
        ...formData,
        cpf_cnpj: formData.cpf_cnpj.replace(/\D/g, ''),
        telefone: formData.telefone.replace(/\D/g, '')
      };
      await onSave(cleanedData);
      showToast({
        type: 'success',
        message: 'Fornecedor cadastrado com sucesso!'
      });

      // Resetar formul√°rio
      setFormData({
        nome: '',
        cpf_cnpj: '',
        razao_social: '',
        email: '',
        telefone: '',
        endereco: '',
        observacoes: ''
      });
      setErrors({});
      onClose();
    } catch (error) {
      showToast({
        type: 'error',
        message: 'Erro ao cadastrar fornecedor',
        description: error.message
      });
    } finally {
      setLoading(false);
    }
  };
  return <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm animate-fadeIn" onClick={onClose}>
      <div className="card-theme max-w-3xl w-full max-h-[90vh] overflow-hidden rounded-2xl shadow-2xl animate-slideUp" onClick={e => e.stopPropagation()}>
        {/* üéØ Header Premium - DESIGN SYSTEM */}
        <div className="bg-gradient-to-r from-blue-600/10 via-indigo-600/10 to-transparent dark:from-blue-600/20 dark:via-indigo-600/20 px-6 py-5 border-b-2 border-light-border dark:border-dark-border">
          <div className="flex items-start justify-between gap-4">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg">
                <Package className="w-6 h-6 text-dark-text-primary" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-theme-primary">
                  Novo Fornecedor
                </h2>
                <p className="text-sm text-theme-secondary mt-1">
                  Cadastre um novo fornecedor no sistema
                </p>
              </div>
            </div>
            <button onClick={onClose} className="flex-shrink-0 p-2 rounded-lg hover:bg-light-surface dark:hover:bg-dark-surface transition-colors focus:outline-none focus:ring-2 focus:ring-primary/50" aria-label="Fechar modal">
              <X className="w-6 h-6 text-theme-secondary hover:text-theme-primary transition-colors" />
            </button>
          </div>
        </div>

        {/* üìä Formul√°rio Scroll√°vel - DESIGN SYSTEM */}
        <form onSubmit={handleSubmit} className="flex-1 overflow-y-auto px-6 py-6 max-h-[calc(90vh-180px)]">
          {/* Se√ß√£o: Dados Cadastrais */}
          <div className="space-y-6">
            <div className="flex items-center gap-3 pb-3 border-b-2 border-light-border dark:border-dark-border">
              <Building2 className="w-5 h-5 text-blue-600 dark:text-blue-400" />
              <h3 className="text-lg font-bold text-theme-primary">
                Dados Cadastrais
              </h3>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Nome/Descri√ß√£o */}
              <div className="md:col-span-1">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Descri√ß√£o <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <Package className="absolute left-3 top-1/2 transform -translate-y-1/2 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="text" placeholder="Nome do fornecedor" value={formData.nome} onChange={e => handleChange('nome', e.target.value)} className={`w-full pl-11 pr-4 py-3 border-2 rounded-xl bg-white dark:bg-gray-800 text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${errors.nome ? 'border-red-500 focus:border-red-500' : 'border-gray-300 dark:border-gray-600 focus:border-blue-500'}`} />
                </div>
                {errors.nome && <p className="text-red-500 text-xs font-medium mt-1.5 flex items-center gap-1">
                    <span className="inline-block w-1 h-1 bg-red-500 rounded-full"></span>
                    {errors.nome}
                  </p>}
              </div>

              {/* CNPJ */}
              <div className="md:col-span-1">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  CNPJ <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <FileText className="absolute left-3 top-1/2 transform -translate-y-1/2 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="text" placeholder="00.000.000/0000-00" value={formData.cpf_cnpj} onChange={e => handleChange('cpf_cnpj', formatCNPJ(e.target.value))} maxLength={18} className={`w-full pl-11 pr-4 py-3 border-2 rounded-xl bg-white dark:bg-gray-800 text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 transition-all duration-200 font-mono ${errors.cpf_cnpj ? 'border-red-500 focus:border-red-500' : 'border-gray-300 dark:border-gray-600 focus:border-blue-500'}`} />
                </div>
                {errors.cpf_cnpj && <p className="text-red-500 text-xs font-medium mt-1.5 flex items-center gap-1">
                    <span className="inline-block w-1 h-1 bg-red-500 rounded-full"></span>
                    {errors.cpf_cnpj}
                  </p>}
              </div>

              {/* Raz√£o Social */}
              <div className="md:col-span-2">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Raz√£o Social
                </label>
                <div className="relative">
                  <Building2 className="absolute left-3 top-1/2 transform -translate-y-1/2 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="text" placeholder="Raz√£o Social da empresa" value={formData.razao_social} onChange={e => handleChange('razao_social', e.target.value)} className="w-full pl-11 pr-4 py-3 border-2 border-light-border dark:border-dark-border rounded-xl card-theme dark:bg-dark-surface text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200" />
                </div>
              </div>

              {/* Email */}
              <div className="md:col-span-1">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Email
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="email" placeholder="email@exemplo.com" value={formData.email} onChange={e => handleChange('email', e.target.value)} className={`w-full pl-11 pr-4 py-3 border-2 rounded-xl bg-white dark:bg-gray-800 text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${errors.email ? 'border-red-500 focus:border-red-500' : 'border-gray-300 dark:border-gray-600 focus:border-blue-500'}`} />
                </div>
                {errors.email && <p className="text-red-500 text-xs font-medium mt-1.5 flex items-center gap-1">
                    <span className="inline-block w-1 h-1 bg-red-500 rounded-full"></span>
                    {errors.email}
                  </p>}
              </div>

              {/* Telefone */}
              <div className="md:col-span-1">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Telefone
                </label>
                <div className="relative">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="text" placeholder="(00) 00000-0000" value={formData.telefone} onChange={e => handleChange('telefone', formatPhone(e.target.value))} maxLength={15} className="w-full pl-11 pr-4 py-3 border-2 border-light-border dark:border-dark-border rounded-xl card-theme dark:bg-dark-surface text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 font-mono" />
                </div>
              </div>

              {/* Endere√ßo */}
              <div className="md:col-span-2">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Endere√ßo
                </label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-3 text-light-text-muted dark:text-dark-text-muted dark:text-theme-secondary w-5 h-5" />
                  <input type="text" placeholder="Endere√ßo completo" value={formData.endereco} onChange={e => handleChange('endereco', e.target.value)} className="w-full pl-11 pr-4 py-3 border-2 border-light-border dark:border-dark-border rounded-xl card-theme dark:bg-dark-surface text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200" />
                </div>
              </div>

              {/* Observa√ß√µes */}
              <div className="md:col-span-2">
                <label className="block text-sm font-bold text-theme-primary mb-2">
                  Observa√ß√µes
                </label>
                <textarea placeholder="Observa√ß√µes adicionais sobre o fornecedor..." value={formData.observacoes} onChange={e => handleChange('observacoes', e.target.value)} rows={3} className="w-full px-4 py-3 border-2 border-light-border dark:border-dark-border rounded-xl card-theme dark:bg-dark-surface text-theme-primary placeholder-gray-400 dark:placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-none" />
              </div>
            </div>
          </div>
        </form>

        {/* üé¨ Footer com A√ß√µes - DESIGN SYSTEM */}
        <div className="px-6 py-4 border-t-2 border-light-border dark:border-dark-border bg-gradient-light dark:from-gray-800 dark:to-gray-750">
          <div className="flex items-center justify-end gap-3">
            <button type="button" onClick={onClose} disabled={loading} className="px-5 py-2.5 text-sm font-semibold text-theme-primary hover:bg-light-surface dark:hover:bg-dark-surface rounded-xl transition-all duration-200 border-2 border-transparent hover:border-light-border dark:border-dark-border dark:hover:border-dark-border disabled:opacity-50">
              Cancelar
            </button>
            <button onClick={handleSubmit} disabled={loading} className="flex items-center gap-2 px-6 py-2.5 rounded-xl font-semibold transition-all duration-200 bg-gradient-to-r bg-gradient-success hover:from-green-700 hover:to-emerald-700 text-dark-text-primary shadow-lg shadow-green-500/30 hover:shadow-green-500/50 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-dark-bg disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none transform hover:scale-105">
              {loading ? <>
                  <div className="w-5 h-5 border-2 border-light-surface dark:border-dark-surface/30 border-t-white rounded-full animate-spin" />
                  Salvando...
                </> : <>
                  <Save className="w-5 h-5" />
                  Cadastrar Fornecedor
                </>}
            </button>
          </div>
        </div>
      </div>
    </div>;
};
export default CreateSupplierModalRefactored;
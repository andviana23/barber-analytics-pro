import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Modal from '../atoms/Modal';
import CurrencyInput from '../atoms/CurrencyInput';
import TimeInput from '../atoms/TimeInput';
import categoriesService from '../services/categoriesService';

/**
 * ServiceFormModal - Modal para criar/editar servi√ßo
 *
 * Template modal CRUD de servi√ßos.
 * Permite gerenciar nome, pre√ßo, dura√ß√£o, comiss√£o e categoria.
 *
 * ‚úÖ Integrado com categorias de "Receita de Servi√ßo"
 * ‚úÖ Valida√ß√£o completa
 * ‚úÖ Tratamento de erros
 *
 * @component
 * @example
 * ```jsx
 * <ServiceFormModal
 *   isOpen={showModal}
 *   onClose={handleClose}
 *   onSave={handleSave}
 *   unitId={selectedUnit.id}
 *   service={serviceData}
 *   mode="create"
 * />
 * ```
 */
const ServiceFormModal = ({
  isOpen,
  onClose,
  onSave,
  unitId,
  service = null,
  mode = 'create',
  // 'create' | 'edit'
  loading = false
}) => {
  const [name, setName] = useState('');
  const [price, setPrice] = useState(0);
  const [durationMinutes, setDurationMinutes] = useState(30);
  const [commissionPercentage, setCommissionPercentage] = useState(45);
  const [categoryId, setCategoryId] = useState('');
  const [errors, setErrors] = useState({});

  // Estados para categorias
  const [categories, setCategories] = useState([]);
  const [loadingCategories, setLoadingCategories] = useState(false);
  const [categoriesError, setCategoriesError] = useState(null);
  const isEditMode = mode === 'edit';

  // üîÑ Carrega categorias quando o modal abre
  useEffect(() => {
    console.log('üéØ ServiceFormModal - useEffect disparado:', {
      isOpen
    });
    if (isOpen) {
      console.log('‚úÖ Modal aberto, carregando categorias...');
      loadCategories();
    } else {
      console.log('‚è∏Ô∏è Modal fechado, n√£o carregando categorias');
    }
  }, [isOpen]);

  // üì• Fun√ß√£o para carregar categorias de "Receita de Servi√ßo"
  const loadCategories = async () => {
    console.log('üîÑ ServiceFormModal - Carregando categorias...');
    setLoadingCategories(true);
    setCategoriesError(null);
    try {
      const result = await categoriesService.getRevenueCategories();
      console.log('üì¶ Categorias recebidas:', result);
      if (result && Array.isArray(result)) {
        // Filtra apenas categorias de servi√ßo (n√£o de produto)
        const serviceCategories = result.filter(cat => cat.revenue_type === 'service');
        console.log('‚úÖ Categorias de servi√ßo filtradas:', serviceCategories);
        setCategories(serviceCategories);

        // Se n√£o h√° categoria selecionada e h√° categorias dispon√≠veis, seleciona a primeira
        if (!categoryId && serviceCategories.length > 0) {
          setCategoryId(serviceCategories[0].id);
          console.log('‚úÖ Categoria auto-selecionada:', serviceCategories[0]);
        }
      } else {
        console.warn('‚ö†Ô∏è Nenhuma categoria retornada');
        setCategories([]);
        setCategoriesError('Nenhuma categoria de servi√ßo encontrada');
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar categorias:', error);
      setCategoriesError('Erro ao carregar categorias. Por favor, tente novamente.');
      setCategories([]);
    } finally {
      setLoadingCategories(false);
    }
  };
  useEffect(() => {
    if (service && isEditMode) {
      setName(service.name || '');
      setPrice(service.price || 0);
      setDurationMinutes(service.duration_minutes || 30);
      setCommissionPercentage(service.commission_percentage || 45);
      setCategoryId(service.category_id || '');
    } else {
      handleReset();
    }
  }, [service, mode, isOpen]);
  const handleReset = () => {
    setName('');
    setPrice(0);
    setDurationMinutes(30);
    setCommissionPercentage(45);
    setCategoryId('');
    setErrors({});
    setCategoriesError(null);
  };
  const handleClose = () => {
    if (!loading) {
      handleReset();
      onClose();
    }
  };
  const validate = () => {
    const newErrors = {};
    if (!name.trim()) {
      newErrors.name = 'Nome √© obrigat√≥rio';
    } else if (name.trim().length < 3) {
      newErrors.name = 'Nome deve ter pelo menos 3 caracteres';
    } else if (name.trim().length > 100) {
      newErrors.name = 'Nome muito longo (m√°ximo 100 caracteres)';
    }
    if (price <= 0) {
      newErrors.price = 'Pre√ßo deve ser maior que zero';
    } else if (price > 10000) {
      newErrors.price = 'Pre√ßo muito alto (m√°ximo R$ 10.000)';
    }
    if (durationMinutes < 5) {
      newErrors.durationMinutes = 'Dura√ß√£o m√≠nima: 5 minutos';
    } else if (durationMinutes > 480) {
      newErrors.durationMinutes = 'Dura√ß√£o m√°xima: 8 horas (480 min)';
    }
    if (commissionPercentage < 0) {
      newErrors.commissionPercentage = 'Comiss√£o n√£o pode ser negativa';
    } else if (commissionPercentage > 100) {
      newErrors.commissionPercentage = 'Comiss√£o m√°xima: 100%';
    }
    if (!categoryId) {
      newErrors.categoryId = 'Selecione uma categoria';
    }
    if (!unitId) {
      newErrors.unitId = 'Unidade n√£o identificada. Selecione uma unidade.';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const handleSubmit = e => {
    e.preventDefault();
    if (!validate()) return;
    if (onSave) {
      onSave({
        name: name.trim(),
        price,
        duration_minutes: durationMinutes,
        commission_percentage: commissionPercentage,
        category_id: categoryId,
        unitId // ‚úÖ Inclui unitId no payload
      });
    }
  };
  const calculateCommission = () => {
    return price * commissionPercentage / 100;
  };
  const commission = calculateCommission();
  return <Modal isOpen={isOpen} onClose={handleClose} title={isEditMode ? 'Editar Servi√ßo' : 'Novo Servi√ßo'} maxWidth="lg">
      <form onSubmit={handleSubmit} className="space-y-6 p-6">
        {/* Aviso se n√£o houver unitId */}
        {!unitId && <div className="bg-feedback-light-error/10 dark:bg-feedback-dark-error/10 border border-feedback-light-error/30 dark:border-feedback-dark-error/30 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-feedback-light-error dark:text-feedback-dark-error flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <div>
                <h4 className="font-semibold text-feedback-light-error dark:text-feedback-dark-error mb-1">
                  Unidade n√£o selecionada
                </h4>
                <p className="text-sm text-feedback-light-error dark:text-feedback-dark-error">
                  Por favor, selecione uma unidade antes de cadastrar um
                  servi√ßo.
                </p>
              </div>
            </div>
          </div>}

        {/* Aviso de erro ao carregar categorias */}
        {categoriesError && <div className="bg-feedback-light-warning/10 dark:bg-feedback-dark-warning/10 border border-feedback-light-warning/30 dark:border-feedback-dark-warning/30 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-feedback-light-warning dark:text-feedback-dark-warning flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <div>
                <h4 className="font-semibold text-feedback-light-warning dark:text-feedback-dark-warning mb-1">
                  Problema ao carregar categorias
                </h4>
                <p className="text-sm text-feedback-light-warning dark:text-feedback-dark-warning">
                  {categoriesError}
                </p>
                <button type="button" onClick={loadCategories} className="mt-2 text-sm font-medium text-feedback-light-warning dark:text-feedback-dark-warning hover:underline">
                  Tentar novamente
                </button>
              </div>
            </div>
          </div>}

        {/* Nome do Servi√ßo */}
        <div>
          <label className="block text-sm font-medium text-theme-primary mb-2">
            Nome do Servi√ßo
            <span className="text-feedback-light-error dark:text-feedback-dark-error ml-1">
              *
            </span>
          </label>
          <input type="text" value={name} onChange={e => setName(e.target.value)} disabled={loading} placeholder="Ex: Corte + Barba" maxLength={100} className={`input-theme ${errors.name ? 'border-feedback-light-error dark:border-feedback-dark-error focus:border-feedback-light-error' : ''}`} />
          {errors.name && <p className="mt-1 text-sm text-feedback-light-error dark:text-feedback-dark-error">
              {errors.name}
            </p>}
        </div>

        {/* üìÇ Categoria do Servi√ßo */}
        <div>
          <label className="block text-sm font-medium text-theme-primary mb-2">
            Categoria
            <span className="text-feedback-light-error dark:text-feedback-dark-error ml-1">
              *
            </span>
          </label>
          {(() => {
          console.log('üé® Renderizando campo categoria:', {
            loadingCategories,
            categoriesCount: categories.length,
            categoriesError,
            categories
          });
          if (loadingCategories) {
            return <div className="flex items-center gap-2 px-4 py-2.5 rounded-lg border border-light-border dark:border-dark-border bg-light-surface dark:bg-dark-hover">
                  <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
                  <span className="text-sm text-theme-secondary">
                    Carregando categorias...
                  </span>
                </div>;
          }
          if (categories.length > 0) {
            return <>
                  <select value={categoryId} onChange={e => setCategoryId(e.target.value)} disabled={loading} className={`input-theme ${errors.categoryId ? 'border-feedback-light-error dark:border-feedback-dark-error focus:border-feedback-light-error' : ''}`}>
                    <option value="">Selecione uma categoria</option>
                    {categories.map(cat => <option key={cat.id} value={cat.id}>
                        {cat.name}
                        {cat.parent?.name ? ` (${cat.parent.name})` : ''}
                      </option>)}
                  </select>
                  {errors.categoryId && <p className="mt-1 text-sm text-feedback-light-error dark:text-feedback-dark-error">
                      {errors.categoryId}
                    </p>}
                  <p className="mt-1 text-xs text-theme-secondary">
                    Apenas categorias de "Receita de Servi√ßo" s√£o exibidas
                  </p>
                </>;
          }
          return <div className="px-4 py-3 rounded-lg border border-feedback-light-warning/30 dark:border-feedback-dark-warning/30 bg-feedback-light-warning/10 dark:bg-feedback-dark-warning/10">
                <p className="text-sm text-feedback-light-warning dark:text-feedback-dark-warning">
                  ‚ö†Ô∏è Nenhuma categoria de servi√ßo cadastrada. Cadastre
                  categorias na p√°gina de Categorias primeiro.
                </p>
              </div>;
        })()}
        </div>

        {/* Pre√ßo e Dura√ß√£o */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Pre√ßo */}
          <div>
            <CurrencyInput label="Pre√ßo" value={price} onChange={setPrice} min={0} max={10000} error={errors.price} required placeholder="0,00" helperText="Valor cobrado do cliente" />
          </div>

          {/* Dura√ß√£o */}
          <div>
            <TimeInput label="Dura√ß√£o" value={durationMinutes} onChange={setDurationMinutes} min={5} max={480} step={5} error={errors.durationMinutes} required showFormatted helperText="Tempo m√©dio de execu√ß√£o" />
          </div>
        </div>

        {/* Comiss√£o */}
        <div>
          <label className="block text-sm font-medium text-theme-primary mb-2">
            Comiss√£o do Profissional (%)
            <span className="text-feedback-light-error dark:text-feedback-dark-error ml-1">
              *
            </span>
          </label>
          <div className="flex items-center gap-3">
            <input type="range" value={commissionPercentage} onChange={e => setCommissionPercentage(parseFloat(e.target.value))} disabled={loading} min={0} max={100} step={5} className="flex-1 h-2 bg-light-surface dark:bg-dark-hover rounded-lg appearance-none cursor-pointer accent-primary" />
            <div className="w-20 px-3 py-2 rounded-lg border border-light-border dark:border-dark-border bg-light-surface dark:bg-dark-hover text-theme-primary font-semibold text-center">
              {commissionPercentage}%
            </div>
          </div>
          <div className="flex justify-between items-center mt-2">
            <p className="text-xs text-theme-secondary">
              Arraste para ajustar a porcentagem
            </p>
            <p className="text-sm font-medium text-feedback-light-success dark:text-feedback-dark-success">
              ={' '}
              {commission.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            })}
            </p>
          </div>
          {errors.commissionPercentage && <p className="mt-1 text-sm text-feedback-light-error dark:text-feedback-dark-error">
              {errors.commissionPercentage}
            </p>}
        </div>

        {/* Preview/Resumo */}
        <div className="bg-light-surface dark:bg-dark-hover rounded-lg p-4 border border-light-border dark:border-dark-border">
          <h4 className="font-semibold text-theme-primary mb-4">
            Resumo do Servi√ßo
          </h4>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm text-theme-secondary">
                Pre√ßo para o cliente:
              </span>
              <span className="text-lg font-bold text-primary">
                {price.toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL'
              })}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-theme-secondary">
                Comiss√£o ({commissionPercentage}%):
              </span>
              <span className="text-lg font-semibold text-feedback-light-success dark:text-feedback-dark-success">
                {commission.toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL'
              })}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-theme-secondary">
                Dura√ß√£o estimada:
              </span>
              <span className="font-medium text-theme-primary">
                {durationMinutes >= 60 ? `${Math.floor(durationMinutes / 60)}h ${durationMinutes % 60}min` : `${durationMinutes} min`}
              </span>
            </div>
          </div>
        </div>

        {/* Dicas */}
        <div className="bg-primary/10 dark:bg-primary/20 border border-primary/30 dark:border-primary/40 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <svg className="w-5 h-5 text-primary flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
            <div className="flex-1">
              <h4 className="font-semibold text-theme-primary mb-1">
                Dicas para Precifica√ß√£o
              </h4>
              <ul className="text-sm text-theme-secondary space-y-1">
                <li>‚Ä¢ Considere custos de materiais e tempo de execu√ß√£o</li>
                <li>‚Ä¢ A comiss√£o t√≠pica varia entre 40% e 60%</li>
                <li>‚Ä¢ Revise pre√ßos periodicamente conforme o mercado</li>
              </ul>
            </div>
          </div>
        </div>

        {/* A√ß√µes */}
        <div className="flex gap-3 pt-4 border-t border-light-border dark:border-dark-border">
          <button type="button" onClick={handleClose} disabled={loading} className="btn-theme-secondary flex-1">
            Cancelar
          </button>
          <button type="submit" disabled={loading} className="btn-theme-primary flex-1 inline-flex items-center justify-center gap-2">
            {loading ? <>
                <div className="w-5 h-5 border-2 border-light-surface dark:border-dark-surface border-t-transparent rounded-full animate-spin" />
                Salvando...
              </> : <>
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                {isEditMode ? 'Salvar Altera√ß√µes' : 'Criar Servi√ßo'}
              </>}
          </button>
        </div>
      </form>
    </Modal>;
};
ServiceFormModal.propTypes = {
  /** Se o modal est√° aberto */
  isOpen: PropTypes.bool.isRequired,
  /** Callback ao fechar */
  onClose: PropTypes.func.isRequired,
  /** Callback ao salvar */
  onSave: PropTypes.func.isRequired,
  /** Dados do servi√ßo (para edi√ß√£o) */
  service: PropTypes.shape({
    name: PropTypes.string,
    price: PropTypes.number,
    duration_minutes: PropTypes.number,
    commission_percentage: PropTypes.number,
    category_id: PropTypes.string
  }),
  /** Modo de opera√ß√£o */
  mode: PropTypes.oneOf(['create', 'edit']),
  /** Estado de carregamento */
  loading: PropTypes.bool,
  /** ID da unidade (obrigat√≥rio para criar/editar servi√ßos) */
  unitId: PropTypes.string.isRequired
};
export default ServiceFormModal;
/**
 * @file OrderTimeline.jsx
 * @description Componente molecule para exibir linha do tempo de mudan√ßas de status
 * @module Components/Molecules
 * @author Andrey Viana
 * @date 2025-10-28
 * @category Atomic Design
 */

import React from 'react';
import PropTypes from 'prop-types';
import { ORDER_STATUS, getStatusLabel } from '../../constants/orderStatus';
import OrderStatusBadge from '../atoms/OrderStatusBadge';

/**
 * OrderTimeline - Timeline visual de mudan√ßas de status da comanda
 *
 * Exibe hist√≥rico cronol√≥gico das transi√ß√µes de status
 * √ötil para auditoria e visualiza√ß√£o do ciclo de vida da comanda
 *
 * @component
 * @example
 * ```jsx
 * const history = [
 *   { status: 'OPEN', timestamp: '2025-10-28T10:00:00Z', user: 'Jo√£o' },
 *   { status: 'IN_PROGRESS', timestamp: '2025-10-28T10:15:00Z', user: 'Jo√£o' },
 *   { status: 'CLOSED', timestamp: '2025-10-28T10:45:00Z', user: 'Maria' }
 * ];
 *
 * <OrderTimeline history={history} />
 * ```
 *
 * @param {Object} props - Propriedades do componente
 * @param {Array} props.history - Array de eventos de mudan√ßa de status
 * @param {boolean} [props.compact=false] - Modo compacto (menos detalhes)
 * @param {string} [props.className] - Classes CSS adicionais
 * @returns {JSX.Element}
 */
const OrderTimeline = ({
  history = [],
  compact = false,
  className = ''
}) => {
  if (!history || history.length === 0) {
    return <div className={`text-gray-500 text-sm italic ${className}`}>
        Nenhum hist√≥rico dispon√≠vel
      </div>;
  }

  /**
   * Formata timestamp para exibi√ß√£o
   */
  const formatTimestamp = timestamp => {
    if (!timestamp) return 'Data n√£o dispon√≠vel';
    try {
      const date = new Date(timestamp);
      return new Intl.DateTimeFormat('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(date);
    } catch (error) {
      console.error('[OrderTimeline] Erro ao formatar data:', error);
      return timestamp;
    }
  };
  return <div className={`relative ${className}`}>
      {/* Linha vertical conectora */}
      <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200" />

      {/* Eventos da timeline */}
      <div className="space-y-4">
        {history.map((event, index) => <div key={index} className="relative flex items-start gap-4">
            {/* Marcador circular */}
            <div className="relative z-10 flex-shrink-0">
              <div className={`
                w-8 h-8 rounded-full border-4 border-white
                flex items-center justify-center
                ${event.status === ORDER_STATUS.CLOSED ? 'bg-green-500' : event.status === ORDER_STATUS.CANCELED ? 'bg-red-500' : event.status === ORDER_STATUS.IN_PROGRESS ? 'bg-blue-500' : event.status === ORDER_STATUS.AWAITING_PAYMENT ? 'bg-yellow-500' : 'bg-gray-400'}
              `}>
                <div className="w-2 h-2 card-theme rounded-full" />
              </div>
            </div>

            {/* Conte√∫do do evento */}
            <div className="flex-1 pb-4">
              <div className="card-theme rounded-lg border border-light-border dark:border-dark-border p-4 shadow-sm">
                {/* Status */}
                <div className="flex items-center justify-between mb-2">
                  <OrderStatusBadge status={event.status} size={compact ? 'sm' : 'md'} />
                  <span className="text-xs text-theme-secondary">
                    {formatTimestamp(event.timestamp)}
                  </span>
                </div>

                {/* Detalhes (apenas modo n√£o-compacto) */}
                {!compact && <>
                    {event.user && <p className="text-sm text-theme-secondary mt-2">
                        üë§ <span className="font-medium">{event.user}</span>
                      </p>}

                    {event.notes && <p className="text-sm text-theme-secondary mt-1 italic">
                        üìù {event.notes}
                      </p>}

                    {event.amount && <p className="text-sm text-theme-secondary mt-1">
                        üíµ R$ {parseFloat(event.amount).toFixed(2)}
                      </p>}
                  </>}
              </div>
            </div>
          </div>)}
      </div>
    </div>;
};
OrderTimeline.propTypes = {
  /** Hist√≥rico de mudan√ßas de status */
  history: PropTypes.arrayOf(PropTypes.shape({
    /** Status neste evento */
    status: PropTypes.oneOf(Object.values(ORDER_STATUS)).isRequired,
    /** Timestamp do evento */
    timestamp: PropTypes.string.isRequired,
    /** Usu√°rio que executou a a√ß√£o */
    user: PropTypes.string,
    /** Notas/observa√ß√µes sobre a mudan√ßa */
    notes: PropTypes.string,
    /** Valor relacionado (para fechamento) */
    amount: PropTypes.number
  })).isRequired,
  /** Modo compacto */
  compact: PropTypes.bool,
  /** Classes CSS adicionais */
  className: PropTypes.string
};
OrderTimeline.defaultProps = {
  compact: false,
  className: ''
};
export default OrderTimeline;
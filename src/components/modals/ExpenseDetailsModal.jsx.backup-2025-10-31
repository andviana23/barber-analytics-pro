import React from 'react';
import { X, Calendar, DollarSign, Tag, Users, FileText, CreditCard, CheckCircle2, Clock, AlertCircle, Banknote, Receipt } from 'lucide-react';
import { format, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';

/**
 * üé® Modal de Detalhes da Despesa - 100% Refatorado
 *
 * Design System Compliant:
 * - Tokens de cor do Design System
 * - Classes tem√°ticas (.card-theme, .text-theme-*)
 * - Grid system responsivo
 * - Tipografia consistente
 * - Acessibilidade (ARIA, foco vis√≠vel)
 * - UX melhorada com visual hier√°rquico
 */
const ExpenseDetailsModal = ({
  expense,
  isOpen,
  onClose
}) => {
  if (!isOpen || !expense) return null;

  // üéØ Status helpers com Design System
  const getStatusBadge = status => {
    const normalizedStatus = status?.toLowerCase();
    if (normalizedStatus === 'paid') {
      return <span className="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400">
          <CheckCircle2 className="w-3.5 h-3.5" />
          Pago
        </span>;
    }
    if (normalizedStatus === 'overdue') {
      return <span className="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400">
          <AlertCircle className="w-3.5 h-3.5" />
          Atrasado
        </span>;
    }
    return <span className="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400">
        <Clock className="w-3.5 h-3.5" />
        Pendente
      </span>;
  };
  return <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4" onClick={onClose} role="dialog" aria-modal="true" aria-labelledby="expense-details-title">
      <div className="card-theme w-full max-w-3xl max-h-[90vh] overflow-hidden flex flex-col shadow-2xl" onClick={e => e.stopPropagation()}>
        {/* üéØ Header com visual destacado */}
        <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent dark:from-primary/20 dark:via-primary/10 px-6 py-5 border-b border-light-border dark:border-dark-border">
          <div className="flex items-start justify-between gap-4">
            <div className="flex-1 min-w-0">
              <h2 id="expense-details-title" className="text-xl font-semibold text-theme-primary mb-2 truncate">
                Detalhes da Despesa
              </h2>
              <p className="text-sm text-theme-secondary line-clamp-2">
                {expense.description || 'Sem descri√ß√£o'}
              </p>
            </div>
            <button onClick={onClose} className="flex-shrink-0 p-2 rounded-lg hover:bg-light-surface dark:hover:bg-dark-surface transition-colors focus:outline-none focus:ring-2 focus:ring-primary/50" aria-label="Fechar modal">
              <X className="w-5 h-5 text-theme-secondary" />
            </button>
          </div>
        </div>

        {/* üìä Conte√∫do scroll√°vel */}
        <div className="flex-1 overflow-y-auto px-6 py-6">
          {/* üí∞ Valor e Status em destaque */}
          <div className="flex items-center justify-between gap-4 mb-8 p-4 bg-gradient-to-br from-primary/5 to-transparent dark:from-primary/10 rounded-xl border border-primary/20 dark:border-primary/30">
            <div>
              <p className="text-sm font-medium text-theme-secondary mb-1">
                Valor Total
              </p>
              <p className="text-3xl font-bold text-theme-primary">
                {expense.value?.toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL'
              }) || 'R$ 0,00'}
              </p>
            </div>
            <div className="flex flex-col items-end gap-2">
              {getStatusBadge(expense.status)}
              {expense.type && <span className="text-xs text-theme-secondary capitalize">
                  {expense.type}
                </span>}
            </div>
          </div>

          {/* üìÖ Se√ß√£o: Informa√ß√µes Principais */}
          <div className="mb-8">
            <h3 className="text-sm font-semibold text-theme-primary uppercase tracking-wide mb-4 flex items-center gap-2">
              <FileText className="w-4 h-4" />
              Informa√ß√µes Principais
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <InfoItem icon={Calendar} label="Data de Emiss√£o" value={expense.date ? format(parseISO(expense.date), "dd 'de' MMMM 'de' yyyy", {
              locale: ptBR
            }) : '-'} />
              <InfoItem icon={Calendar} label="Data de Vencimento" value={expense.expected_payment_date ? format(parseISO(expense.expected_payment_date), "dd 'de' MMMM 'de' yyyy", {
              locale: ptBR
            }) : '-'} highlight={expense.status?.toLowerCase() === 'overdue'} />
              <InfoItem icon={Tag} label="Categoria" value={expense.category?.name || 'Sem categoria'} />
              <InfoItem icon={Users} label="Pessoa/Fornecedor" value={expense.party?.nome || 'N√£o informado'} />
              <InfoItem icon={Banknote} label="Conta Banc√°ria" value={expense.account?.name ? `${expense.account.name}${expense.account.bank_name ? ` (${expense.account.bank_name})` : ''}` : 'N√£o informada'} />
            </div>
          </div>

          {/* üí≥ Se√ß√£o: Informa√ß√µes de Pagamento */}
          {expense.status?.toLowerCase() === 'paid' && expense.actual_payment_date && <div className="mb-8">
                <h3 className="text-sm font-semibold text-theme-primary uppercase tracking-wide mb-4 flex items-center gap-2">
                  <Receipt className="w-4 h-4" />
                  Informa√ß√µes de Pagamento
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-green-50 dark:bg-green-900/10 rounded-lg border border-green-200 dark:border-green-900/30">
                  <InfoItem icon={Calendar} label="Data de Pagamento" value={format(parseISO(expense.actual_payment_date), "dd 'de' MMMM 'de' yyyy", {
              locale: ptBR
            })} variant="success" />
                  <InfoItem icon={DollarSign} label="Valor Pago" value={expense.value?.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            }) || 'R$ 0,00'} variant="success" />
                </div>
              </div>}

          {/* üìù Se√ß√£o: Observa√ß√µes */}
          {expense.observations && <div className="mb-8">
              <h3 className="text-sm font-semibold text-theme-primary uppercase tracking-wide mb-4 flex items-center gap-2">
                <FileText className="w-4 h-4" />
                Observa√ß√µes
              </h3>
              <div className="p-4 card-theme rounded-lg border border-light-border dark:border-dark-border">
                <p className="text-sm text-theme-secondary whitespace-pre-wrap leading-relaxed">
                  {expense.observations}
                </p>
              </div>
            </div>}

          {/* ‚ÑπÔ∏è Se√ß√£o: Informa√ß√µes Adicionais */}
          {(expense.forma_pagamento || expense.data_competencia) && <div>
              <h3 className="text-sm font-semibold text-theme-primary uppercase tracking-wide mb-4 flex items-center gap-2">
                <CreditCard className="w-4 h-4" />
                Informa√ß√µes Adicionais
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {expense.forma_pagamento && <InfoItem icon={CreditCard} label="Forma de Pagamento" value={expense.forma_pagamento} />}
                {expense.data_competencia && <InfoItem icon={Calendar} label="Data de Compet√™ncia" value={format(parseISO(expense.data_competencia), 'dd/MM/yyyy', {
              locale: ptBR
            })} />}
              </div>
            </div>}
        </div>

        {/* üéØ Footer com a√ß√£o */}
        <div className="px-6 py-4 border-t border-light-border dark:border-dark-border bg-light-bg dark:bg-dark-bg">
          <div className="flex justify-end">
            <button onClick={onClose} className="px-6 py-2.5 rounded-lg font-medium transition-all duration-200 card-theme text-theme-primary hover:bg-light-border dark:hover:bg-dark-border focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 dark:focus:ring-offset-dark-bg">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>;
};

/**
 * üé® Componente auxiliar: InfoItem
 * Item de informa√ß√£o reutiliz√°vel com √≠cone
 */
const InfoItem = ({
  icon: Icon,
  label,
  value,
  highlight,
  variant
}) => {
  const getVariantClasses = () => {
    if (variant === 'success') {
      return 'text-green-700 dark:text-green-400';
    }
    if (highlight) {
      return 'text-red-700 dark:text-red-400 font-semibold';
    }
    return 'text-theme-primary';
  };
  return <div className="flex items-start gap-3 p-3 rounded-lg hover:bg-light-surface dark:hover:bg-dark-surface transition-colors">
      <Icon className="w-5 h-5 text-theme-secondary flex-shrink-0 mt-0.5" />
      <div className="flex-1 min-w-0">
        <p className="text-xs font-medium text-theme-secondary uppercase tracking-wide mb-1">
          {label}
        </p>
        <p className={`text-sm font-medium ${getVariantClasses()} break-words`}>
          {value}
        </p>
      </div>
    </div>;
};
export default ExpenseDetailsModal;